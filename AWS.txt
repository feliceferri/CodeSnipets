AMAZON Iot Core

Connect Device => Copy URL
Exit

Manage => All Devices => Things => Create Thing
	Single thing, unnamed shadow, auto-generate new certificate
	Create policy => Allow, action: *, resource: *

	CREATED A ALL OPEN POLICY AND ATTACHED TO THE THING
	Police Effect : Allow | Policy Action : * | Policy Resource : *  
		To Attach the policy: Go to the Thing => Certificates => Click on the Certificate ID => Policies =>  Attach

Message Routing => Rules
	SELECT * FROM 'iot/topic'
	
Rule to DynamoDB
	Used Timestamp as Partition Key 
	Partition Key Value: ${timestamp()}
	IAM role => Create New Role => Put any name. (wait some seconds to take place)




DONWLOAD OPEN SSL
	https://sourceforge.net/projects/openssl-for-windows/

	CHECK IF WE CAN USE THE CERTIFICATES TO CONNECT TO IoT Core

	c:\openssl\openssl s_client -CAfile AmazonRootCA1.pem -cert xxxxxx7cae2e5f7807e68d-certificate.pem.crt -key xxxx030bfbe7cae2e5f7807e68d-private.pem.key -connect a3e30kbpu3d4gs-ats.iot.us-east-2.amazonaws.com:8883

	CONVERT THE CERTIFICATE FROM .PEM TO .PFX

	c:\openssl\openssl pkcs12 -export -in xxxxxxae2e5f7807e68d-certificate.pem.crt -inkey 1xxxxxxx8112030bfbe7cae2e5f7807e68d-private.pem.key -password pass:somepassword -out certificate.cert.pfx -certfile AmazonRootCA1.pem 


CODE:
https://hexquote.com/aws-iot-with-net-core-mqtt/




To get the URI

AWS => IoT Core => Connect One Device => Scroll Down



TESTING FROM AWS MQTT Test Client
    Publish to a Topic
    iot/topic
   "{'dataContractId': '1665a5b9-862d-410a-a0c8-65b702e6fe90','field':'Amazon Test from AWS MQTT Test Cloud'}"   (This works)


----------------

VISUAL STUDIO AWS EXTENSION

To get the Access keys => https://docs.aws.amazon.com/toolkit-for-vscode/latest/userguide/obtain-credentials.html

--------------------
DYNAMODB

Create Table

   
   PartitionKey timestamp_id NUMBER  => For a rule we can then use ${timestamp()}
   No Sort Key

  Splitted
   	Partition SN string (This didn't work, it has to be unique)
      Partition id STRING
	  No Sort
   
-------------------------

LAMBDA
	
AWS Lambda Project
		Empty Function

	public async Task<string> FunctionHandler(dynamic input, ILambdaContext context)
    {
        //return input.ToUpper();

        var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(input), Encoding.UTF8, "application/json");
        HttpResponseMessage httpPesponse = await _httpClient.PostAsync("xxxxxx", content);
        if (httpPesponse.IsSuccessStatusCode)
        {
            string response = await httpPesponse.Content.ReadAsStringAsync();
            return $"SendNotificationEmail Processed from Object. Response: {response}";
        }
        else
        {
            return $"SendNotificationEmail Processed from Object. Unsuccessful Response. Status Code: {httpPesponse.StatusCode.ToString()} Content:" + (await httpPesponse.Content?.ReadAsStringAsync());
        }
    }

PUBLISH
	Right click project => Publish AWS



ping a3e30kbpu3d4gs-ats.iot.us-east-2.amazonaws.com
thing Name: HED_Simulator

---------------------------
SET UP A SQL Database (RDS)

click on VPC Security Group
	Inbund Rules
		Edit Inbound Rules
			MSSQL for the first dropdown
				Source Anywhere Ip4
				0.0.0.0/0
---------------------------------

IOT Gateway

Canned ACL: private
IAM Role: AmazonS3FullAccess

S3 KEY

${topic()}/${deviceId}/${parse_time("yyyy", timestamp())}/${parse_time("MM", timestamp())}/${parse_time("dd", timestamp())}/${parse_time("HH", timestamp())}//${timestamp()}
${topic()}/${deviceId}/${parse_time("yyyy", timestamp())}/${parse_time("MM", timestamp())}/${parse_time("dd", timestamp())}/${parse_time("HH", timestamp())}/${parse_time("yyyy_MM_dd_HH:mm:ss.SSSZ", timestamp())}

----------------------------------------

CONNECT TO POSTGRES OVER BASTION USING TUNNELING

From the cmd=>
ssh -i "C:\xxx\xxx.pem" -NL 8886:aurora-db-postgres-xxxxxxx.us-east-1.rds.amazonaws.com:5432 ubuntu@34.239.x.xx -v

--------------------------------------------

CONNECT TO AN EC2 FROM BASTION

ssh -i xx.pem ubuntu@{ip or dns}  (Bastion Instance)

Copy File to the Bastion Host
scp -i xx.pem {fileToCopy} ubuntu@{ip or dns):/home/ubuntu/

Connect to the Instance from Bastion Host
ssh -i xx.pem -vv ubuntu@{ip or dns}    (-vv very verbose)

telenet IP 22

------------------------------------------------

EC2 + LOAD BALANCER + STATIC IP 

Create the EC2 Instance (if windows, to connect use the connect button on the AWS dashboard, provide the .pem file to get back the password for RDP)
Allocate Elastic IP (I don't have to associate them with anything, just create them)
Create Load Balancer (Network Load Balancer)
    Mappings =>  IPv4 Addres => Use an Elastic IP Address
		     Listeners => Port 3389 (RDP)
                              Target Group

-----------------------------------

FIREWALL WHITELIST IPs API GATEWAY


-----------------------------------------------------

CONNECT TO S3 from python in local PC

Install AWS CLI
c:\users\{user}\.aws\credentials  => Copy the Management Console credentials.

S3 bucket can still be private, no need to create an Allow Policy either.

------------------------

S3 REPLICATION CROSS ACCOUNT 

https://itnext.io/s3-cross-account-replication-42dd83f42492