Add Razor pages for Web API 
(Identity - Reset Password etc)

startup.cs

services.AddRazorPages().AddNewtonsoftJson(); 

app.UseStaticFiles();  (Before app.UseRouting)

app.UseEndpoints(endpoints =>
            {
                endpoints.MapRazorPages();
                endpoints.MapControllerRoute("default", "api/{controller=Home}/{action=Index}/{id?}");
                endpoints.MapControllers();
            });



------------------

TO ADD IDENTITY

1) Add Nugets
Microsoft.AspNetCore.Identity.EntityFrameworkCore
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Design
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools

2) ADD ApplicationDbContext

using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

public class ApplicationDbContext : IdentityDbContext<IdentityUser>
{
    public ApplicationDbContext(DbContextOptions options) : base(options)
    {
    }
}

////This can be a non-identity dbcontext
  public class ApplicationDbContext: DbContext
    {
        public CompanyContext(DbContextOptions options)
            : base(options)
        {        }

        public DbSet<Employee> Employees { get; set; }
    }

3) STATURP.CS

using CommandCenter.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("SqlConnection")));

builder.Services.AddIdentity<IdentityUser, IdentityRole>(options => options.SignIn.RequireConfirmedAccount = true)
                .AddEntityFrameworkStores<ApplicationDbContext>();


4) APP.SETTINGS
 "ConnectionStrings": {
    "SqlConnection": "Server=.;Initial Catalog=MyAppDb; Integrated Security=true;"
  },


5) add-migration EntityFrameworkInitialMigration
   update-database

6) DO SCAFFOLDING

7) Twillio Send grid - Single Sender needs to match with From Account, and that needs to be verified otherwise 403 Forbidden error.

Helper Class

using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using SendGrid;
using SendGrid.Helpers.Mail;
using System;
using System.Threading.Tasks;

namespace Helpers
{
    public class AuthMessageSenderOptions
    {
	       public string? SendGridKey { get; set; } = "xxxxxxxxxxx"; 
    }

    public class EmailSender : IEmailSender
    {
        private readonly ILogger _logger;

        public EmailSender(IOptions<AuthMessageSenderOptions> optionsAccessor,
                           ILogger<EmailSender> logger)
        {
            Options = optionsAccessor.Value;
            _logger = logger;
        }

        public AuthMessageSenderOptions Options { get; } //Set with Secret Manager.

        public async Task SendEmailAsync(string toEmail, string subject, string message)
        {
            if (string.IsNullOrEmpty(Options.SendGridKey))
            {
                throw new Exception("Null SendGridKey");
            }
            await Execute(Options.SendGridKey, subject, message, toEmail);
        }

        public async Task Execute(string apiKey, string subject, string message, string toEmail)
        {
            var client = new SendGridClient(apiKey);
            var msg = new SendGridMessage()
            {
                 From = new EmailAddress("FromAccount@xxxx.com", "Password Recovery"),
                Subject = subject,
                PlainTextContent = message,
                HtmlContent = message
            };
            msg.AddTo(new EmailAddress(toEmail));

            // Disable click tracking.
            // See https://sendgrid.com/docs/User_Guide/Settings/tracking.html
            msg.SetClickTracking(false, false);
            var response = await client.SendEmailAsync(msg);
            _logger.LogInformation(response.IsSuccessStatusCode
                                   ? $"Email to {toEmail} queued successfully!"
                                   : $"Failure Email to {toEmail}");
        }
    }
}

----------------------

ZIP A FILE

System.IO.Compression.ZipFile.CreateFromDirectory(dir.FullName, zipFile.FullName); 

-----------------------

RETURN A FILE

response: ActionResult

var memory = new MemoryStream();
            await using (var stream = new FileStream(zipFile.FullName, FileMode.Open))
            {
                await stream.CopyToAsync(memory);
            }
            memory.Position = 0;
            return File(memory, "application/zip", zipFile.FullName);

** There is an angular example on how to consume it in the Angular.txt file (DOWNLOAD FILE FROM API)

-----------------------

CONTROLLER ATTRIBUTES

[TypeFilter(typeof(ProjectManagerOrAdminOrRoleFilter))]
[ApiVersion("1.0")]
[Route("api/v{version:apiVersion}/[controller]")]
[ApiController]

Filter:
public class ProjectManagerOrAdminOrRoleFilter : IAsyncActionFilter

---------------------------------

