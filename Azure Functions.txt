https://dev.to/ebarrioscode/azure-functions-serverless-entity-framework-core-y-sql-azure-1ngd

-------------------
Expose QueryString arguments as binding

[FunctionName("GetErrorCodeInformation")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.function, "get", "post", Route = "GetErrorCodeInformation/{ErrorCode}")] HttpRequest req,
            ILogger log, string ErrorCode)


---------------------

USING SQL

Nugets

Microsoft.EntityFrameworkCore.SqlServer
Microsoft.Azure.Functions.Extensions (for Dependency Injections)
Microsoft.EntityFrameworkCore.Tools (for migrations) 
Microsoft.EntityFrameworkCore.Design (for migrations)
Microsoft.EntityFrameworkCore (for migrations)


//To do Dependency Injection for the Context
=> Create Startup.cs inside the Azure Function

using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System;


[assembly: FunctionsStartup(typeof(ProjectX.Startup))]
namespace ProjectX
{
    class Startup : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            string SqlConnection = Environment.GetEnvironmentVariable("SqlConnectionString");
            builder.Services.AddDbContext<Data.ApplicationDbContext>(
                options => options.UseSqlServer(SqlConnection));
        }
    }
}


Application.DbContext

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace Data
{
    public class ApplicationDbContext : DbContext 
    {
	
	private readonly ILogger<ApplicationDbContext> _log;
	
	public ApplicationDbContext()
        {
		//*** This constructor can't have ILogger, has to be an empty constructor, otherwise we would have a Runtime Error related to the DbContext
            this.Database.EnsureCreated();
	    IEnumerable<string> pendingMigrations = this.Database.GetPendingMigrations();
            if (pendingMigrations != null && pendingMigrations.Count() > 0)
            {
                this.Database.Migrate();
            }
        }
      
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, ILogger<ApplicationDbContext> log): base(options)
        {
try
{	    this.Database.EnsureCreated();
	    IEnumerable<string> pendingMigrations = this.Database.GetPendingMigrations();
            if (pendingMigrations != null && pendingMigrations.Count() > 0)
            {
                this.Database.Migrate();
            }
}
 catch (Exception ex)
            {
		if (_log != null)
                    _log.LogError(ex, "");
                else
                    throw (ex);
            }
        }
      
        public DbSet<EnvelopeV1> RawData_EnvelopeV1 { get; set; }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

        }
    }
}


Injection in the function

private readonly Data.ApplicationDbContext _context;

public Func1(Data.ApplicationDbContext context)
{
	_context = context;
}
        
[FunctionName("Func1")]
public async Task Run([IoTHubTrigger("messages/events", Connection = "IOTHubConnectionString", ConsumerGroup = "%IOTHubConsumerGroup%")]EventData message, 



///MIGRATIONS       **https://www.youtube.com/watch?v=5VBftGK064Y&t=351s

CREATE DbContextFactory.cs

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace Data
{
    public class DbContextFactory : IDesignTimeDbContextFactory<ApplicationDbContext>
    {
	private readonly ILogger<ApplicationDbContext> _log;
        public DbContextFactory(ILogger<ApplicationDbContext> log)
        {
            this._log = log;
        }

        public ApplicationDbContext CreateDbContext(string[] args)
        {
            var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
	    
            string SqlConnection = Environment.GetEnvironmentVariable("SqlConnectionString");
            optionsBuilder.UseSqlServer(SqlConnection);

            return new ApplicationDbContext(optionsBuilder.Options, this._log);
        }
    }
}


COPY THIS IN PROJECT.cs File   ** That is because EF Core is waiting for the project.dll to be in the root path, and Azure functions puts the dll in an inner folder

<Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="copy /Y &quot;$(TargetDir)bin\$(ProjectName).dll&quot; &quot;$(TargetDir)$(ProjectName).dll&quot;"/>
  </Target>
------------------

ENVIRONMENT VARIABLES 

Environment.GetEnvironmentVariable("AzureSQLCustomers")

local.settings.json => "Values": {"AzureSQLCustomers": "connectionStringHere"}

-------------------------

INJECT EXECUTIONCONTEXT

ExecutionContext exCtx

public static void Run([IoTHubTrigger("messages/events", Connection = "IOTHubConnectionString", ConsumerGroup = "coldstoragetocosmosdb")]EventData message, ILogger log, ExecutionContext exCtx)

InvocationId = exCtx.InvocationId
ServiceName = exCtx.FunctionName

---------------------

CALLING A TRIGGERED FUNCTION (LIKE TIME TRIGGERED) MANUALLY "ON-DEMAND"

Method: POST
URI: https://lhptcleanupservice.azurewebsites.net/admin/functions/CleanupService  */admin/functions is a constant in order to meake the call, the last parameter at the right is the name of the Function
Header: x-functions-key  key *this key comes from Azure function => Access keys => _master key
        Content-Type  application/json

If the call is being made from the browser it will receive a CORS error, it has to be made from the back-end. It also works in Advances Rest Client

Example that works:

using (var client = new HttpClient())
                {
                    //client.DefaultRequestHeaders.Clear();
                    client.DefaultRequestHeaders.Add("x-functions-key", "Key goes here");
                    //client.DefaultRequestHeaders.Add("Content-Type", "application/json");
		   
		    HttpResponseMessage response = await client.PostAsync("https://lhptcleanupservice.azurewebsites.net/admin/functions/CleanupService", 
                                                                            new StringContent("{}", Encoding.UTF8,"application/json"));
                    response.EnsureSuccessStatusCode();
                    var result = await response.Content.ReadAsStringAsync();
                    return Ok(result);
                }


------------------------

ADD OUTPUT SCHEMA IN AP MANAGEMENT SERVICES FOR POWER APP CONNECTIVITY

API Management Service
Add the Function
Front-End (Edit Pencil)
Responses => Add Response => Add Representation

Write: application/json (in the textbox)
Click in Definition (right side)
+ New Definition => Copy JSON

-----------------------------

INTERNAL CALL BETWEEN TWO AZURE FUNCTIONS INSIDE THE SAME PROJECT

  [FunctionName("TestingInternalCall")]
        public async Task<IActionResult> Run(
          [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = null)] HttpRequest req,
          ILogger log)
        {

            ResolutionForms.Models.Resolution data = null;

            Microsoft.AspNetCore.Mvc.ActionResult<ResolutionForms.Models.Resolution> response = await GetResolution.getResolution(req, log, "300");
            if (response.Result is Microsoft.AspNetCore.Mvc.OkObjectResult OkResult)
            {
                data = (ResolutionForms.Models.Resolution)OkResult.Value;
            }
            
            
            return new OkObjectResult("");
        }

-------------------------------------------

RECIVE A FILE IN AZURE FUNCTION


var file = req.Form.Files["file"];
uploadedFilePath = SignToolTempFolder.FullName + @"\" + Guid.NewGuid().ToString() + ".exe.dig";
Stream s = File.Create(uploadedFilePath);
file.CopyTo(s);
s.Close();

*req is part of the method signature (HttpRequest req)

To send a file with Advanced Rest Client => Headers => Content-Type : multipart/form-data 
					    Body => multipart/form-data => Select the File, put a name to the Form Variable
----------------------------------------------

TO RETURN A FILE FROM THE AZURE FUNCTION

Change the output Method signature to => public static async Task<HttpResponseMessage> Run(

System.Net.Http.HttpResponseMessage result = new System.Net.Http.HttpResponseMessage(HttpStatusCode.OK);
var fileToReturn = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.None, 4096, FileOptions.DeleteOnClose);
result.Content = new System.Net.Http.StreamContent(fileToReturn);
result.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
result.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment")
{
	FileName = "FileName"
};

--------------

SWAGGER

https://www.codit.eu/blog/adding-swagger-ui-azure-functions/

---------------------

Deploy through FTP

For Both:
1) Downloaded the Publish Profile
2) Extracted FTP Endpoint, User Name & Psw
3) Connected through Filezilla/Windows File Explorer
         3.a When using FileZilla use the full user name  XX\$YY
        3.b When using Windows File Explorer just use the second part $YY  

For Windows Azure Function (C#)
4) Navigate to \data\SitePackages\      (You will need to go back in the folder structure)
5) Download the packagename.txt file.
6) In Vistual Studio => Publish to folder
7) Create Zip of all the content in the \publish folder  (not including the publish folder itself, just the content)
** Backup the packagename.txt before next step **
8) Open the packagename.txt and write the name of the zip file with its extension (avoid blank spaces, tested only with lowercase)
9) Using FileZilla copy the zip file to the \data\SitePackages\ folder
10) Using FileZilla Copy/Overwrite the \data\SitePackages\packagename.txt with the local copy that has the new zip file name on it.

For Linux Azure Function (Python)
4) Navigate to \site\wwwroot\          (You will need to go back in the folder structure)
** Backup FTP folder content before next step **
5) Copy the new Function Folder + .funcignore,host.json,requirements
6) Navigate to \site\config            (You will need to go back in the folder structure)
7) Download the restartTrigger.txt
8) Modify the content restarTrigger.txt  (you can add anything)
9) Upload the local restarTrigger.txt to its original location in the FTP folder and overwrite
10) Wait 2 mins, real 2 minutes, it just take time to trigger the update.

----------------------------

Deploy through Azure CLI

1) Publish => Folder 
2) Create .zip of all the content inside the publish folder

Download and Install Azure CLI for windows (Blue button)

https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli

open CMD

az login


az webapp deployment source config-zip -g $resourceGroupName -n $functionName --src $sourceZipPath