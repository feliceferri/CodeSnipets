https://dev.to/ebarrioscode/azure-functions-serverless-entity-framework-core-y-sql-azure-1ngd

---------------------

USING SQL

Nugets

Microsoft.EntityFrameworkCore.SqlServer
Microsoft.Azure.Functions.Extensions (for Dependency Injections)
** Microsoft.EntityFrameworkCore.Tools (for migrations) I have not been able to make Migrations Works with Azure Functions
** Microsoft.EntityFrameworkCore.Design (for migrations)


//To do Dependency Injection for the Context
=> Create Startup.cs inside the Azure Function

using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System;


[assembly: FunctionsStartup(typeof(ProjectX.Startup))]
namespace ProjectX
{
    class Startup : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            string SqlConnection = Environment.GetEnvironmentVariable("SqlConnectionString");
            builder.Services.AddDbContext<Data.ApplicationDbContext>(
                options => options.UseSqlServer(SqlConnection));
        }
    }
}


Application.DbContext

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace Data
{
    public class ApplicationDbContext : DbContext 
    {
        public ApplicationDbContext()
        {
            this.Database.EnsureCreated();
        }
      
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options): base(options)
        {
        }
      
        public DbSet<EnvelopeV1> RawData_EnvelopeV1 { get; set; }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

        }
    }
}


Injection in the function

private readonly Data.ApplicationDbContext _context;

public Func1(Data.ApplicationDbContext context)
{
	_context = context;
}
        
[FunctionName("Func1")]
public async Task Run([IoTHubTrigger("messages/events", Connection = "IOTHubConnectionString", ConsumerGroup = "%IOTHubConsumerGroup%")]EventData message, 



///MIGRATIONS       **https://www.youtube.com/watch?v=5VBftGK064Y&t=351s

CREATE DbContextFactory.cs

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace Data
{
    public class DbContextFactory : IDesignTimeDbContextFactory<ApplicationDbContext>
    {
        public ApplicationDbContext CreateDbContext(string[] args)
        {
            var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
            optionsBuilder.UseSqlServer(Environment.GetEnvironmentVariable("SqlConnectionString"));

            return new ApplicationDbContext(optionsBuilder.Options);
        }
    }
}


COPY THIS IN PROJECT.cs File   ** That is because EF Core is waiting for the project.dll to be in the root path, and Azure functions puts the dll in an inner folder

<Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="copy /Y &quot;$(TargetDir)bin\$(ProjectName).dll&quot; &quot;$(TargetDir)$(ProjectName).dll&quot;"/>
  </Target>
------------------

ENVIRONMENT VARIABLES 

Environment.GetEnvironmentVariable("AzureSQLCustomers")

local.settings.json => "Values": {"AzureSQLCustomers": "connectionStringHere"}

-------------------------

INJECT EXECUTIONCONTEXT

ExecutionContext exCtx

public static void Run([IoTHubTrigger("messages/events", Connection = "IOTHubConnectionString", ConsumerGroup = "coldstoragetocosmosdb")]EventData message, ILogger log, ExecutionContext exCtx)

InvocationId = exCtx.InvocationId
ServiceName = exCtx.FunctionName