Startup.cs

nuget MongoDBDriver

ConfigureServices()

services.AddSingleton<IMongoClient, MongoClient>(_ =>
                new(Environment.GetEnvironmentVariable("MONGODB_CONNECTION_STRING")));

BsonDefaults.GuidRepresentationMode = GuidRepresentationMode.V3;
MongoDB.Bson.Serialization.BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.Standard));

--------------------

DynamicSerializerToBsonDocument

 internal class DynamicSerializerToBsonDocument : SerializerBase<dynamic>
    {
        public override object Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
        {
            var serializer = BsonSerializer.LookupSerializer(typeof(BsonDocument));
            var document = serializer.Deserialize(context, args);

            var bsonDocument = document.ToBsonDocument();

            var result = BsonExtensionMethods.ToJson(bsonDocument);
            return System.Text.Json.JsonSerializer.Deserialize<IDictionary<string, object>>(result);
        }

        public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value)
        {
            var jsonDocument = System.Text.Json.JsonSerializer.Serialize(value);
            var bsonDocument = BsonSerializer.Deserialize<BsonDocument>(jsonDocument);

            var serializer = BsonSerializer.LookupSerializer(typeof(BsonDocument));
            serializer.Serialize(context, bsonDocument.AsBsonValue);
        }

    }


DynamicSerializerToString

 class DynamicSerializerToString: SerializerBase<dynamic>
    {
        public override void Serialize(MongoDB.Bson.Serialization.BsonSerializationContext context, MongoDB.Bson.Serialization.BsonSerializationArgs args, dynamic value)
        {
            context.Writer.WriteString(System.Text.Json.JsonSerializer.Serialize(value));
        }

        public override dynamic Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext context, MongoDB.Bson.Serialization.BsonDeserializationArgs args)
        {
            return System.Text.Json.JsonSerializer.Deserialize<dynamic>(context.Reader.ReadString());
        }
    }

----------

https://digitteck.com/mongo-csharp/deserializing-expandoobject-with-bsonserializer-in-mongo/


------------------------------------

DOCKER

docker pull mongo

docker run -d -p 27017:27017 --name MongoTest mongo
(-d: run container in detached mode. This Means the docker container runs in the background of the terminal. It does not accept input or show output.)

To execute commands in that container => docker exec -it MongoTest /bin/bash
--------------------------------------

DOCKER-COMPOSE

App Settings:
 //"ConnectionString": "mongodb://localhost:27017",
    "ConnectionString": "mongodb://mongo:27017",


Project => Right click => Add => Docker Support => Linux => Docker Compose

docker-compose.yml
version: '3.4'


services:

  mongo:
    image: mongo
    ports:
      - 27017:27017


  mongotest:
    image: ${DOCKER_REGISTRY-}mongotest
    ports:
      - "8000:80"
    depends_on:
      - mongo
    build:
      context: .
      dockerfile: MongoTest/Dockerfile