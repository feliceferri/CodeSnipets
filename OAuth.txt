WITH CUSTOM USERS

*** WEB API SIDE ********
1) Create a Controller

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;


namespace probari_backend.API
{
    [Route("api/[controller]")]
    [ApiController]
    public class OAuth : ControllerBase
    {
        public class LoginModel
        {
            public string UserName { get; set; }
            public string Password { get; set; }
        }

        [HttpPost("Login")]
        [AllowAnonymous]
        public IActionResult Login([FromBody] LoginModel user)
        {
            if (user == null)
            {
                return BadRequest("Invalid client request");
            }

	    //Here is where we are going to check for the User and Password to match.
            if (user.UserName == "johndoe" && user.Password == "def@123")
            {
                var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("SecretKey"));
                var signinCredentials = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);
                var tokeOptions = new JwtSecurityToken(
                    issuer: "http://localhost:5000",
                    audience: "http://localhost:5000",
                    claims: new List<Claim>(),
                    expires: DateTime.Now.AddMinutes(20),
                    signingCredentials: signinCredentials
                );
                var tokenString = new JwtSecurityTokenHandler().WriteToken(tokeOptions);
                return Ok(new { Token = tokenString, ExpiresUTC = DateTime.UtcNow.AddMinutes(20).AddSeconds(-10) });
            }
            else
            {
                return Unauthorized();
            }
        }
    }
}


2) Modify the Startup.cs

ConfigureServices()

services.AddAuthentication(opt =>
            {
                opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = "http://localhost:5000",
                    ValidAudience = "http://localhost:5000",
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("SecretKey"))
                };
            });


Configure()
	app.UseAuthentication();



--------------------------------------

**** ANGULAR SIDE ********

1) Add interceptor to inject the Bearer in each call

app.module.ts

import { authInterceptorProviders } from './service/auth.interceptor'

@NgModule({
        ...
        providers: [... authInterceptorProviders]



2) Create the auth.interceptor.ts

import { HTTP_INTERCEPTORS, HttpEvent, HttpBackend } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable, from } from 'rxjs';
import { AuthService,OAuthToken } from './auth-service';

const TOKEN_HEADER_KEY = 'Authorization';
const TOKEN_KEY = 'auth-token';

const AUTH_LOGIN_API = 'https://localhost:44301/api/OAuth/Login';
const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};


@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  private httpClientWithBackendHandler_GetsExcludedFromTheInterceptor:HttpClient;

  constructor(private authService: AuthService, private http: HttpClient,
    private httpBackendHandler: HttpBackend) {

    this.httpClientWithBackendHandler_GetsExcludedFromTheInterceptor = new HttpClient(this.httpBackendHandler)
  }

  intercept(req: HttpRequest<any>, next: HttpHandler) {
    // convert promise to observable using 'from' operator
    return from(this.handle(req, next))
  }

  async handle(req: HttpRequest<any>, next: HttpHandler) {

    let authReq = req;

    let token: string = await this.getTokenAsync()
    console.log("token", token);

    if (token != null) {
      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });
    }

    // Important: Note the .toPromise()
    return next.handle(authReq).toPromise()
  }



  public async getTokenAsync(): Promise<string> {

    //See if we have it on the session
    let token: OAuthToken = JSON.parse(sessionStorage.getItem(TOKEN_KEY));

    if (token == null || token == undefined || token.expiresUTC > new Date()) {
      //Here we will pass the logged user
      token = await (this.login("johndoe", "def@123").toPromise());
      this.saveToken(token);
    }

    return token.token;
  }

  private saveToken(token: OAuthToken): void {
    window.sessionStorage.removeItem(TOKEN_KEY);
    window.sessionStorage.setItem(TOKEN_KEY, JSON.stringify(token));
  }

  login(username: string, password: string): Observable<OAuthToken> {
    return this.httpClientWithBackendHandler_GetsExcludedFromTheInterceptor.post<OAuthToken>(AUTH_LOGIN_API, {
      username: username,
      password: password
    }, httpOptions);
  }
}



export const authInterceptorProviders = [
  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
];


3) Create the auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

const AUTH_API = 'https://localhost:44301/api/OAuth/';
const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' })
};

export interface OAuthToken{
  token: string,
  expiresUTC:Date
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private http: HttpClient) { }
  
  login(username:string, password: string): Observable<OAuthToken> {
    return this.http.post<OAuthToken>(AUTH_API + 'Login', {
      username: username,
      password: password
    }, httpOptions);
  }
  
}

---------------------------------

GET RAW TOKEN FROM CALL

var accessToken = HttpContext.Current.Request.Headers["Authorization"];
