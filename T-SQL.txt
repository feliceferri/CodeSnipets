

-----------------------------------------
CREATE A COLUMNS CONSTRAINT THAT DOESNT ALLOW DUPLICATES BUT IT ALLOWS REPEATING NULLs

CREATE UNIQUE NONCLUSTERED INDEX AK_MSAuthenticationID_Unique
ON datospersonales(MSAuthentication_ID)
WHERE MSAuthentication_ID IS NOT NULL;
----------------------------------------------------------------

TRUNCATE ALL TABLES (Clean a Database)

SELECT 'TRUNCATE TABLE ' + '['+ TABLE_CATALOG + '].['+ TABLE_SCHEMA + '].['+ TABLE_NAME + ']'
FROM INFORMATION_SCHEMA.TABLES 
WHERE Table_Type = 'BASE TABLE' 
ORDER by TABLE_NAME

-----------------------------------------------------------------

LIST TABLES IN A DATABASE 

OLD WAY => SELECT * FROM SYSOBJECTS WHERE xtype = 'U';
NEW WAY    SELECT * FROM (optional databasename)INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';

-----------------------------------

GENERATE A SQL SCRIPT WITH A LIST OF ALL THE TRIGGERS TO BE DELETED

DECLARE @sql NVARCHAR(MAX) = N'';

SELECT @sql += 
    N'DROP TRIGGER ' + 
    QUOTENAME(OBJECT_SCHEMA_NAME(t.object_id)) + N'.' + 
    QUOTENAME(t.name) + N'; ' + NCHAR(13)
FROM sys.triggers AS t
WHERE t.is_ms_shipped = 0
  AND t.parent_class_desc = N'OBJECT_OR_COLUMN';

PRINT @sql;

------------------------------

GET ALL TABLES AS A CONCATENATED STRING

SELECT STRING_AGG(CONVERT(NVARCHAR(max), ISNULL([Name],'N/A')), '|') AS Tables FROM SYSOBJECTS WHERE xtype = 'U';

-----------------------------

CONVERT DateTime to varchar to use in Dynamic SQL

convert(varchar, @LastSync, 121)

-----------------------------

COUNT ROWS IN ALL TABLES

SELECT
      QUOTENAME(SCHEMA_NAME(sOBJ.schema_id)) + '.' + QUOTENAME(sOBJ.name) AS [TableName]
      , SUM(sPTN.Rows) AS [RowCount]
FROM 
      sys.objects AS sOBJ
      INNER JOIN sys.partitions AS sPTN
            ON sOBJ.object_id = sPTN.object_id
WHERE
      sOBJ.type = 'U'
      AND sOBJ.is_ms_shipped = 0x0
      AND index_id < 2 -- 0:Heap, 1:Clustered
GROUP BY 
      sOBJ.schema_id
      , sOBJ.name
ORDER BY [TableName]
GO

---------------------

UPDATE THESE FIELDS IN ALL TABLES

IF OBJECT_ID('tempdb..#BaseData') IS NOT NULL DROP TABLE #BaseData
GO
CREATE TABLE #BaseData (Schema_Name sysname, Table_Name sysname, Field_Name sysname, SQLScript varchar(max));

DECLARE @FieldName varchar(20); SET @FieldName = 'ServerTimeUTC';

INSERT INTO #BaseData (Schema_Name, Table_Name, Field_Name, SQLScript)
SELECT
s.name
,o.name 
,c.name
,'UPDATE ' + s.name + '.' + o.name + ' SET ' + c.name + ' = ''' + convert(varchar, GETUTCDATE(), 121) + ''', LastUpdate_LocalUTCTime = ''' + convert(varchar, GETUTCDATE(), 121) +  ''''
FROM sys.columns c
JOIN sys.types t
    ON c.user_type_id = t.user_type_id
JOIN sys.objects o
    ON c.object_id = o.object_id
JOIN sys.schemas s ON o.schema_id=s.schema_id
WHERE c.name LIKE @FieldName 
    AND o.type_desc = 'USER_TABLE';
    SELECT * FROM #BaseData

	DECLARE @sql VARCHAR(MAX)
DECLARE @SqlScript VARCHAR(max)

DECLARE c CURSOR LOCAL FAST_FORWARD FOR
    SELECT SQLScript
    FROM #BaseData;
OPEN c;
FETCH NEXT FROM c INTO @SQLScript;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = @SqlScript

    EXEC(@sql); 

	PRINT 'Executing => ' + @sql

    FETCH NEXT FROM c INTO @SQLScript;
END

CLOSE c;
DEALLOCATE c;

----------------------------------------

DISABLE ALL INDEXES

select 'ALTER INDEX [' + I.name + '] ON [' + T.name + '] DISABLE'
from sys.indexes I
inner join sys.tables T on I.object_id = T.object_id
where I.type_desc = 'NONCLUSTERED'
and I.name is not null

-------------------------------------
CREATE USER AND LOGIN AND GIVE HIM PERMISSIONS

--ON MASTER DATABASE
CREATE LOGIN IgnitionApp WITH password = 'xxxxx'
GO
CREATE USER [IgnitionApp] FOR LOGIN [IgnitionApp] WITH DEFAULT_SCHEMA = [dbo]
GO

--ON TARGET DATABASE
CREATE USER [IgnitionApp] FOR LOGIN [IgnitionApp] WITH DEFAULT_SCHEMA = [dbo]
--GO
--EXEC sp_droprolemember 'db_owner', 'IgnitionApp';
GO
EXEC sp_addrolemember 'db_datareader', 'IgnitionApp';
GO
EXEC sp_addrolemember 'db_datawriter', 'IgnitionApp';
GO

ADD PERMISSION TO A SPECIFIC STORE PROCEDURE
=> GRANT EXECUTE ON OBJECT::dbo.spCreateDailyReport TO GenerateReportUser;  

--------------------------------

COUNT NUMBER OF NULL COLUMNS IN A ROW

DECLARE @SQL NVARCHAR(MAX)

SET @SQL = 'SELECT SpecificColumns, '

SELECT @SQL = @SQL + '

       + CASE WHEN [' + [sys].[columns].[name] + '] IS NULL THEN 0 ELSE 1 END'

FROM [sys].[columns]

WHERE [sys].[columns].[object_id] = OBJECT_ID('Table Name')

    AND [sys].[columns].is_nullable = 1

 
SET @SQL = @SQL + '

       AS [NullValuesCount] FROM [Table Name]'

 

PRINT @SQL

 

EXEC sp_executesql @SQL

-------------------

DISTRIBUTION OF FILLED CELLS BY COLUMNS

DECLARE @SQL nvarchar(MAX);
DECLARE @Table sysname = 'TP1_Data';
DECLARE @Schema sysname = 'dbo';

SET @SQL = N'WITH Counts AS (' + NCHAR(13) + NCHAR(10) + 
           N'    SELECT @Schema AS SchemaName,' + NCHAR(13) + NCHAR(10) +
           N'           @Table AS TableName,' +
           STUFF((SELECT N',' + NCHAR(13) + NCHAR(10) + 
                         N'           COUNT(' + QUOTENAME(C.COLUMN_NAME) + N') AS ' + QUOTENAME(COLUMN_NAME)
                  FROM INFORMATION_SCHEMA.COLUMNS C
                  WHERE C.TABLE_SCHEMA = @Schema
                    AND C.TABLE_NAME = @Table
                  FOR XML PATH(N''),TYPE).value('.','nvarchar(MAX)'),1,14,N'') + NCHAR(13) + NCHAR(10) + 
           N'    FROM ' + QUOTENAME(@Table) + N')' + NCHAR(13) + NCHAR(10) + 
           N'SELECT V.ColumnName,' + NCHAR(13) + NCHAR(10) + 
           N'       V.NonNullCount,' + NCHAR(13) + NCHAR(10) + 
           N'       ISC.DATA_TYPE + ISNULL(DT.S,'''') AS Datatype,' + NCHAR(13) + NCHAR(10) +
           N'       ISNULL(PK.IsPrimaryKey,''No'') AS PrimaryKey' + NCHAR(13) + NCHAR(10) +
           N'FROM Counts C' + NCHAR(13) + NCHAR(10) + 
           N'     CROSS APPLY(VALUES' + STUFF((SELECT N',' + NCHAR(13) + NCHAR(10) + 
                                                      N'                       (N' + QUOTENAME(C.COLUMN_NAME,'''') + N',C.' + QUOTENAME(C.COLUMN_NAME) + N')'
                                               FROM INFORMATION_SCHEMA.COLUMNS C
                                               WHERE C.TABLE_NAME = @Table
                                               FOR XML PATH(N''),TYPE).value('.','nvarchar(MAX)'),1,26,N'') + N')V(ColumnName,NonNullCount)' + NCHAR(13) + NCHAR(10) +
           N'     JOIN INFORMATION_SCHEMA.COLUMNS ISC ON C.SchemaName = ISC.TABLE_SCHEMA' + NCHAR(13) + NCHAR(10) +
           N'                                        AND C.TableName = ISC.TABLE_NAME' + NCHAR(13) + NCHAR(10) +
           N'                                        AND V.ColumnName = ISC.COLUMN_NAME' + NCHAR(13) + NCHAR(10) + 
           N'     CROSS APPLY (VALUES(''('' + STUFF(CONCAT('','' + CASE ISC.CHARACTER_MAXIMUM_LENGTH WHEN -1 THEN ''MAX'' ELSE CONVERT(varchar(4),ISC.CHARACTER_MAXIMUM_LENGTH) END,' + NCHAR(13) + NCHAR(10)+
           N'                                            '','' + CASE WHEN ISC.DATA_TYPE NOT LIKE ''%int'' THEN CONVERT(varchar(4),ISC.NUMERIC_PRECISION) END,' + NCHAR(13) + NCHAR(10) +
           N'                                            '','' + CASE WHEN ISC.DATA_TYPE NOT LIKE ''%int'' THEN CONVERT(varchar(4),ISC.NUMERIC_SCALE) END,' + NCHAR(13) + NCHAR(10) +
           N'                                            '','' + CONVERT(varchar(4),ISC.DATETIME_PRECISION)),1,1,'''') + '')'')) DT(S)' + NCHAR(13) + NCHAR(10) +
           N'     OUTER APPLY(SELECT ''Yes'' AS IsPrimaryKey ' + NCHAR(13) + NCHAR(10) + 
           N'                 FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC' + NCHAR(13) + NCHAR(10) + 
           N'                      JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU ON TC.TABLE_SCHEMA = KCU.TABLE_SCHEMA' + NCHAR(13) + NCHAR(10) + 
           N'                                                                  AND TC.TABLE_NAME = KCU.TABLE_NAME' + NCHAR(13) + NCHAR(10) + 
           N'                                                                  AND TC.CONSTRAINT_NAME = KCU.CONSTRAINT_NAME' + NCHAR(13) + NCHAR(10) + 
           N'                 WHERE TC.CONSTRAINT_TYPE = ''PRIMARY KEY''' + NCHAR(13) + NCHAR(10) + 
           N'                   AND KCU.COLUMN_NAME = V.ColumnName' + NCHAR(13) + NCHAR(10) + 
           N'                   AND TC.TABLE_SCHEMA = ISC.TABLE_SCHEMA' + NCHAR(13) + NCHAR(10) + 
           N'                   AND TC.TABLE_NAME = ISC.TABLE_NAME) PK ORDER BY V.NonNullCount DESC;';

PRINT @SQL; --Might need to use SELECT here--SELECT @SQL;EXEC sp_executesql @SQL, N'@Schema sysname,@Table sysname',@Schema = @Schema, @Table = @Table;

--------------------------------------------------------------

CLEAR CACHE

//To show how many Caches are living
SELECT count(*) from sys.dm_exec_cached_plans;
SELECT * from sys.dm_exec_cached_plans;

//To delete caches
DBCC FREEPROCCACHE;
ALTER DATABASE SCOPED CONFIGURATION CLEAR PROCEDURE_CACHE;  //This doesnt delete that many caches

-------------------------------------


RECOVERY MODEL

Show current recovery model
SELECT name AS [databasename], recovery_model_desc AS [Recovery Model] FROM sys.databases

---------------------------

LIST TABLE DEPENDENCIES

select *
from sys.sql_dependencies d
join sys.objects o on o.object_id=d.object_id
join sys.objects r on r.object_id=d.referenced_major_id
where d.class=1
AND r.name = 'TP1_Data'

-------

LIST COMPUTED COLUMNS

SELECT name  AS [Computed Column?],definition
FROM sys.computed_columns

----------------------

COMPARE TWO TABLES

SELECT name, system_type_id, user_type_id,max_length, precision,scale, is_nullable, is_identity INTO #DBSchema FROM sys.columns
WHERE object_id = OBJECT_ID(N'dbo.DTC_Data')
GO

GO
SELECT name, system_type_id, user_type_id,max_length, precision,scale, is_nullable, is_identity INTO #DB2Schema FROM sys.columns
WHERE object_id = OBJECT_ID(N'dbo.Telematics_Data ');

GO 
SELECT * FROM #DBSchema
EXCEPT 
SELECT * FROM #DB2Schema

---------------------------

GET RECORD COUNT AT A TIME INTERVAL

declare @interval int
set @interval = 1
select  datepart(day, ServerTimeUTC) as Day, datepart(hh, ServerTimeUTC) as Hour
--, datepart(mi, ServerTimeUTC)/@interval*@interval
, count(*) as Records
from TableXXXX
WHERE SerialNumber = 'xxxxx' AND ServerTimeUTC > '2021-10-24'
group by datepart(day, ServerTimeUTC),datepart(hh, ServerTimeUTC)
--, datepart(mi, ServerTimeUTC)/@interval*@interval
ORDER BY  datepart(day, ServerTimeUTC), datepart(hh, ServerTimeUTC)

---------------------------------