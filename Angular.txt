ANGULAR

INSTALLATION

1) Download nodejs.  Includes npm

2) Check Windows Environment Variables
   User Variables (UP) Path has to contain the npm folder
   System Variables (DOWN) Path has to contain nodejs folder
**If System Variables button are disabled => Windows Search: Edit the System Environment Variables => Environment Variables (bottom)

3) Install Angular CLI from VS Code Terminal
   a. Check if is already installed globally
	 npm list -g
   b. If not install it
	 install -g @angular/cli@latest


Troubleshoot

Had problems with ng new, it failed on the dependecy tree with the @angular/compiler component
Uninstalled nodejs (from Windows Applications)
Reinstalled the LTS
(Dont't know if the previous steps has anything to do or not)

This finally solved it
npm remove -g @angular/cli
npm install -g @angular/cli

---------------------------------------------------------

COMMANDS

ng new {projectName}

ng serve (compile the project)

ng generate component UploadTemplate   //Creates a Component

ng g service getApi                    //Creates a Service

ng build

ng run


NPM

npm install grid-list

npm install  @angular/material 

npm install  (same folder as the package.json) Will install everything. 
*if we delete the package-lock.json and the node_modules folder, and run it, it will install everything again.

ng serve

npm audit fix

----------------------
ADD BOOTSTRAP

1. Terminal pointing to the ClientApp folder
2. npm install save bootstrap    

-------------------------------

ADD FONTAWESOME

npm install save @fortawesome/fontawesome-free
Manually go to angular.json => projects => architect => options => styles = add =>
"node_modules/@fortawesome/fontawesome-free/css/all.css",

---------------------

Error => The NPM script 'start' exited without indicating that the Angular CLI was listening for requests
      => Create the project without the HTTPS

------------------------

npm install save leaflet@1.6.0
the Heat library was added manually as .js file

Manually go to angular.json => projects => architect => options => styles = add =>
"node_modules/leaflet/dist/leaflet.css",

Manually go to angular.json => projects => architect => options => scripts
-----------------
STATIC CONTENT

Goes into App/Assets  *Any other folder should be declared in angular.json (there is assets for build & for test)
or in wwwroot

---------------
USE A STYLE IN A SPECIFIC COMPONENT

@Component({
  selector: 'app-my-map',
  templateUrl: './my-map.component.html',
  styleUrls: ['./my-map.component.scss']
})


Upload Image https://www.youtube.com/watch?v=v67NunIp5w8

----------------------

RUN ANGULAR PROJECT INSIDE AN MVC PROJECT


csproj

<Target Name="CopyFileToOutput" AfterTargets="ComputeFilesToPublish">
    <Message Text="Custom Dist Copy Process" Importance="high" />
    <ItemGroup>
      <_CopyItems Include="$(SpaRoot)dist\**\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_CopyItems)" DestinationFolder="obj\Release\net5.0\PubTmp\Out\wwwroot" />
  </Target>
  
  
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">

** Explored this base-href path, was able to change the path, checked by F12 Network traffic, but got a different error
csproj
<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build --base-href=/ClientApp/dist/" />
<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr --base-href=/ClientApp/dist/" Condition=" '$(BuildServerSideRenderer)' == 'true' " />
ClientApp/angular.json
  projects=>xx=>architect=>build=>options  add  //"baseHref": "../ClientApp/dist/",


startup.cs

ConfigureServices()

// In production, the Angular files will be served from this directory
services.AddSpaStaticFiles(configuration =>
{
	configuration.RootPath = "ClientApp/dist";
});

Configure()

   app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
                endpoints.MapRazorPages();
            });

            app.UseSpa(spa =>
            {

                spa.Options.SourcePath = "ClientApp";

                if (env.IsDevelopment())
                {
                    spa.UseAngularCliServer(npmScript: "start");
                }
            });


-------------------------------------

node-saas 4.0.0 error

check it says 4.0.0 on the package.json
delete node_modules folder and package-lock.

Go to VS Code run npm install from the 

npm install --legacy-peer-deps 

-------------------------

CALL A WEB API 

app.modules.ts
import { HttpClientModule} from '@angular/common/http'
Then add HttpClientModule to the imports list (below same file)

ng g service TemplateAPI
import { HttpClient} from '@angular/common/http'  ***is HttpClient not HttClientModule


export class TemplateAPIService {

  constructor(
    private http:HttpClient) { 
 }

  GetList()
  {
    return this.http.get('https://localhost:44353/api/Template/List')
  }

  SaveAsObservable(formData: FormData)
  {
    return this.http.post('https://localhost:44353/api/Template/Save', formData);
  }

  async SaveAsync(formData: FormData)
  {

    let response = await this.http.post('https://localhost:44353/api/Template/Savex', formData)
            .toPromise()
            .catch(err => console.log("Error: " + err.message));

    return response;
  }
}

To use it:  this.templateApiService.GetList().subscribe((data) => {console.log("Api data:",data);})
Lesson: "Observables need to be observed to make a request".


posts: any;

getPosts(){
  this.posts = this.http.get('url')  
}

//Same but with strong typing
posts: Observable<Post[]>;
getPosts(){
  this.posts = this.http.get<Post[]>('url')  
}

///Add parameters through the HttpParams class
let params = new HttpParams().set('userId','1');
this.http.get('url',{params});

///Add Headers
let headers = new HttpHeaders().set('Authorization','Bearer xxx');
this.http.get('url',{headers});

<button (click)="getPosts()"> Get Posts</button>
<div *ngFor="let post of posts | async">    This statement loops through and Observable, that's why it has the | async.   It can be used to read directly from an HttpClient.Get
  {{post | json }}
</div>


import 'rxjs/add/operator/map';     //rxjs operators to filter the result
this.http.post('xxx',data)
	.map(post => post.title);
---------------------------------
WORKING WITH FORMS

app.modules.ts
import {FormsModule} from '@angular/forms'
add it to the imports array.

//Template reference variable (#userForm)
<form #userForm="ngForm" (ngSubmit)="OnSubmit(userForm.value)">

//Needs the name attribute and the ngModel flag, to be added to the Forms Values
<input type="text" name="name" placeholder="name" ngModel/>

---------------------------------------

NAVIGATE WITH OPTIONA PARAMETERS

app-routing.module.ts
      {path: 'path/:resultId', component: ComponentName},
      {path: 'path', component: ComponentName},

//The caller component
import { Router } from '@angular/router';
constructor(private _router: Router) { }
this._router.navigate(['first'])

//The component being called
import { ActivatedRoute } from '@angular/router';
constructor(private route: ActivatedRoute) {

ngOnInit(): void {
    this.refreshTestCriteriaListAsync();
    this.resultsReviewForm = this.formBuilder.group({
      testCriteria: [""],
      logbooks: new FormControl({ value: "", disabled: true })
    });

    this.route.params.subscribe(params => {
    	if(params.resultId)
	{}
    }
  );

---------------------------------------------

PASS VALUES TO CHILD COMPONENT FROM PARENT

PARENT
<child-component [variableName]="Variable"></child-component>

CHILD
import { Input} from '@angular/core';
export class Component implements OnInit {
  @Input() VariableName: Type;

------------------------------------

CALL CHILD COMPONENT FUNCTION FROM PARENT

<ChildComponent #variableName></ChildComponent>
@ViewChild('variableName', {static: true}) variableName: ControlType

ngAfterViewInit() {
	this.variableName.method()
}

-----------------------------------------

ngFor over a Map

<div *ngFor="let field of map | keyvalue">
          <p-radioButton [inputId]="dateField.key" name="dateField" [value]="dateField" [(ngModel)]="selectedField" [disabled]="category.key === 'R'"></p-radioButton>
          <label [for]="dateField.key">{{dateField[0]}}</label>
</div>

-----------------------------------------------

ng g guard auth

app.routing-module.ts
import { AuthGuard } from './auth.guard';
in each path add ,canActivate:[AuthGuard] => {path: 'testform', component: TestFormComponent,canActivate:[AuthGuard]},

auth.guard.ts
Add Router to import '@angular/router'
constructor(private router:Router){}

this.router.navigate(['/login']); 
return false;

-----------------------------------------------

SYNCHRONOUS HTTP CALL

isTokenValid():boolean {

        var request = new XMLHttpRequest();
        request.open('GET', this.baseUrl + "/IsTokenValid", false);  
        
        request.send();
    
        console.log("isTokenValid status: ",request.status);

        if (request.status === 200) 
            return true;
        else 
            return false;
        
    }

------------------------------------------

EXPORT TO EXCEL

npm i xlsx
npm i file-saver

import * as XLSX from 'xlsx';
import * as FileSaver from 'file-saver';

exportProjectToExcel()
  {
    
    let project = JSON.parse(sessionStorage.getItem('selectedProject'));

    const excelFileName = "Project.xlsx";
    
    let workbook: XLSX.WorkBook = XLSX.utils.book_new();

    workbook.Props ={Title: "Title",
              Subject: "Subject",
              Author: "FuSa Explorer"};
    
    workbook.SheetNames.push("SubSystem");   
    
    let ws_data = [['hello','world']];

    let worksheet:XLSX.WorkSheet = XLSX.utils.aoa_to_sheet(ws_data);

    workbook.Sheets["SubSystem"] = worksheet;

    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    this.saveAsExcelFile(excelBuffer, excelFileName);
  }

  private saveAsExcelFile(buffer: any, fileName: string): void {

    const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
    const EXCEL_EXTENSION = '.xlsx';

    const data: Blob = new Blob([buffer], {type: EXCEL_TYPE});
    FileSaver.saveAs(data, fileName + '_export_' + new  Date().getTime() + EXCEL_EXTENSION);
 }

