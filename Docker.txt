docker images  (list installed images)

docker run -it -d -p 8080:80 --name web nginx

docker attach {containerName}  Shows the terminal from inside container
	=> hostname -i  (once connected we can run this command to get the IP Address)

it (interactive mode)
name custom name => web
nginx (image)

docker ps => containers running
tag = version

sudo netstat -tlnp  (list the ports that already are assigned in the computer)

docker stop web
docker rm web

nl dockerfile  (Shows the content)
FROM nginx:latest
COPY ./index.html /usr/share/nginx/html/index.html

docker build . 
docker build -t nameofTheContainer .   (point is local directory, where the dockerfile resides)  -t If we want to name the Container, but this is optional


-----------------------------------

1) 
CREATE REPOSITORY IN Docker HUB

- Blue menu in the top, (center) => Repositories
- Right button Create Repository
- Write a name
- Public/Private
----------------------------------

2) Terminal

(1st LOGIN)

docker login  *No parameters, it will use SSO

Can be used with parameters: docker login --username username

--------------------------------------------

LIST IMAGES

docker image ls

--------------------------

3)  RUN TAG COMMAND TO MATCH AN IMAGE WITH A REMOTE REPO

docker tag dockertest lukerec/lukedocker

--------------------

4) DOCKER PUSH 

docker push lukerec/lukedocker

------------------------------------

5) DOCKER PULL

From another computer
docker pull lukerec/lukedocker

---------------------------

6) LIST IMAGES TO CORROBORATE IT WAS DOWNLOADED
docker image ls

--------------------------

7) RUN THE CONTAINER

docker run lukerec/lukedocker

docker run -dit --name my-alpine-container alpine /bin/sh  (-d runs container in the background, -i keeps the standar input of the container open, -t allocates sudo tty which makes the 											container look like a terminal container session)

docker exec (connects to a running container, to inspect it, but when the container stars again, everything get losts)

-----------------

DOCKER + ANGULAR EXAMPLE #1

** run npm build so it creates the ./dist folder with all the static content

FROM nginx:latest

COPY ./dist/sample-aungular-app  /usr/share/nginx/html

EXPOSE 80

--------

docker build -t sample .
docker run -d -p 8080:80 sample      (-p the first is the local system, the right is the port exposed in the docker file, -d run in the background so it doesnt dump the data in the terminal)
we can add -name {name}  this is in case we want to run multiple intances of the same container in different ports

-----------------------

DOCKER + ANGULAR EXAMPLE #2

FROM node:latest as build

WORKDIR /usr/local/app

COPY ./  /usr/local/app

RUN npm install

RUN npm run build


FROM nginx:latest

COPY --from=build /usr/local/app/dist/sample-angular-app  /usr/share/nginx/html

----------------------------

DOCKER COMPOSE EXAMPLE

https://github.com/DanWahlin/Angular-Core-Concepts/blob/master/docker-compose.prod.yml

docker-compose up

--------------------------------------

NETWORKS

USER DEFINED NETWORKS provides DNS resolution so you can ping containers by name, the Default network does not.
USER DEFINED NETWORKS you can connect and disconnect without restarting the container, with Default one you can't.                      

LIST NETWORKS: sudo docker network ls  (bridge is the default one)

INSPECT A NETWORK: sudo docker network inspect bridge  (it lists the containers connected to the network)

CREATE A NEW NETWORF: sudo docker network create br2  (This will create a network of type bridge as it is the default type)

DISCONNECT A CONTAINER FROM THE NETWORK: docker network disconnect {networkName} {containerName}

CONNECT A CONTAINER TO THE NEWTORK: docker network connect networkName} {containerName}

docker attach {containerName}  Shows the terminal from inside container
	=> hostname -i  (once connected we can run this command to get the IP Address)

------------------------------