
npx create-react-app {nameoftheapp}
npm install (to install the node modules)
npm start

BUTTON CLICK

 onClick={() => {AddTextField()}}

function AddTextField()  
{
  console.log('Here');
}

---------------------------------------

node -v
npm -v
npm init
npm install lite-server --save-dev (el save dev significa que el paquete sera utilizado para propositos de development)
Modifico el Package.json => debajo de "scripts":{ => agrego => "start":"npm run lite",
Mismo bloque, agrego comma (,) al final de "test", y abajo agrego un nuevo entry
=> "lite":"lite-server"
bash en la carpeta => npm start  Ahi me va a decir el puerto etc y abre el browser

crear .gitignore file => primera linea agregar => node_modules

-------------------------------------------

ATTACH VS CODE DEBUGGER

Create a launch.json file (same level as src, node_modules)  * It will be created by VS code automatically when running the debugger the first time

{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "chrome",
            "request": "launch",
            "name": "Launch Chrome against localhost",
            "url": "http://localhost:3000",
            "webRoot": "${workspaceFolder}"
        }
    ]
}

NOTE!!! You have to click the run button and then from the termina do => npm run or npm start.


----------------------------

 useEffect(() => {...}, []);  No 2nd argument will run first time and every time any tracked variable is changed, if the 2nd argument is [] it will run only the first time.

-----------


uiSchema={logBookTemplatesAndData[0].template.ui}
dataSchema={logBookTemplatesAndData[0].template.data}

export function UpdateTemplate()
{
  console.log("yes2");
  alert("yes2");
}


--------------------
HOOKS

Only in function components, not in class components
Hooks can't be put inside conditions, as they have to run always in the same exact order.

const [count, setCount] = useState(10) //Because is a function component, not a class componenet, this useState will run everytime the component is rendered
const [count, setCount] = useState(() => 10) //Runs only the 1st time

setCount(count + 1)  'Count is the value when the component was rendered
setCount(count + 1)  'Value will still be 11

setCount(prevCount => prevCount +1) //Overload of the function that allows to read the actual value in the current moment.
setCount(prevCount => prevCount +1) //Value will be 12


useEffect
* Gets executed everytime a Render happens
useEffect( () => {console.log('x')})

* 2nd parameter allow to filter when tu run the useEffect
useEffect( () => {console.log('x')},[variableName])  //This its executed only when that specific variable changes
                                                     //if the value of the variable is the same, even if the button is clicked, it wont get executed until the value changes.

* If the variable is empty [], it works as an OnMount, only is executed the first time the component is rendered
useEffect( () => {console.log('x')},[]) //Is like OnMount

* A return inside the useEffect is called when the effect is UnMounted, especially for when we are hooking up to Event Listener (See WINDOWS EVENT LISTENER below)
** The return is always executed first, before the "OnMounting" code itself, is a cleanup code.
-----------------------------

FORCE UPDATE IN FUNCTIONS

const [, updateState] = useState();
const forceUpdate = useCallback(() => updateState({}), []);


//FF: Tried with useRef and still didn't update, that's why I coded the Force Update below

---------------------------------

FETCH

useEffect( () => {
            fetch('https://xxx')
	    .then(response => response.json())
            .then(json => To Do )
         }

---------------

MAP

{items.map(item => {
   return <pre>{JSON.stringigy(item){</pre>
  })}

--------------------

IS VARIABLE A FUNCTION?

if(value instanceof Function)
   value();


---------------

WINDOWS EVENT LISTENER

** If in App component, do it in OnMount, and then Unmount it
In function components, use the useEffect to only be executed on initialization []

ADD Event Listener.

useEffect( () => {window.addEventListener('resize', function to call)},[])

REMOVE Event Listener.
* In the same useEffect add the return statement
useEffect( () => {window.addEventListener('resize', function to call)}
		 return () => {window.removeEventListener('resize', function to call } ,[])


window.innerWidth    //window with in px

-------------------------

CLASS COMPONENT

import {Component} from 'react';

export class MyClassComponenet extends Component {

constructor(){  //To initialize the state
   super(); //To initialize the base class
   this.state = {counter: 0};
}

render(){
	return(<span>{this.props.text}</span>
               <span>{this.state.counter}</span>
               <button onClick={()=> this.setState((currentState) => { return {counter = currentState.counter +1 });}></button>
               )
   ;
}

componentDirMount() //runs before the render method.
{}

componentWillUnmount() //runs before destruction, while the component is still visible
{}


------------------

CUSTOM HOOK - useUpdatelogger

import {useEffect} from 'react'

export default function useUpdateLogger(value) {
	useEffect(() => {console.log(value)},[value])
}

to use it: useUpdateLogger(variableName);

--------------

USERREF  - Two ussages

a)
const timesRenderHasBeenExecutedForThisComponent = useRef(0)

useEffect(() => {renderCount.current = renderCount.current +1});

global accross renderers like App Class this.state
when changing the value, doens't activate the Rendering Cycle because is outside of it

b)
It also work to reference HTML objects

const inputRef = useRef();

<input ref={inoutRef}></inout>
(this is what is used for focus)

---------------------
FORWARD REF

const Form = forwardRef((props,ref) =>
{

  useImperativeHandle(ref, () => ({

    ForceUpdate()
    {
      forceUpdate();
    }

  }));

  return(<HTML CODE {props.Prop1}>)
}

export default Form;

------------------------

IMPORT A MODULE IN CODE

const module = await  System.import("dd");
module.function();

----------------------

JSX Condition


{condition && <html>}

----------------

NAVIGATION

!!react-router-dom v6.0

import { useNavigate } from "react-router-dom";
let navigate = useNavigate(); 
navigate('Strokes');

!!react-router-dom v5

import { useHistory } from "react-router-dom";
const history = useHistory(); 
history.push('Strokes');

PASS Parameter
history.push({pathname:'Strokes',state :{testId:testId}});

RECEIVE Parameter
import { useLocation } from "react-router-dom";
const location = useLocation();
console.log(location.state.testId);
--------------------

ICONS LIBRARY

Tabler

---------------------------

STYLE

style={{ display: 'flex', alignItems: 'center' }}

------------------------------------

AZURE STATIC WEB APPS, Avoid 404 error when Refreshing (F5)

1. Create staticwebapp.config.json in \public
2. {
    "navigationFallback": {
      "rewrite": "index.html",
      "exclude": ["*.svg", "*.png", "*.jpg", "*.gif", "*.css", "*.js"]
    }
  }

      