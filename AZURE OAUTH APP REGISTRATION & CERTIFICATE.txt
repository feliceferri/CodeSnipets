AZURE OAUTH APP REGISTRATION & CERTIFICATE

-------------------
USING SECRET

https://login.microsoftonline.com/{TenantId - Active Directory GUID or DNS}/oauth2/v2.0/token

HEADER
Content-Type: application/x-www-form-urlencoded

BODY
grant_type  client_credentials
client_secret  bVR46kMA_IQzG~xxxxx
client_id ad593129-eaeb-40xxxx  APP REGISTRATION ID
scope api://ad593129-eaeb-40xxx APP REGISTRATION ID/.default  ** The /.default has to be added

--------------------------------------

CERTIFICATE BASED AUTHENTICATION

CREATE A CERTIFICATE

Developer Console in Administrator mode

makecert -sky exchange -r -n "CN=CumminsTest2" -pe -a sha1 -len 2048 -ss My "CumminsTest2.cer"

certmgr.msc
Navigate to Certificates > Personal > Certificates
right click => All Tasks => Export
No, do not export private key
Base64 x.509


WENT TO THE AZURE FUNCTION
=> Authentication, created a new Identity Provider following defaults

WENT TO THE APP REGISTRATION
Upload the Certificate to App Registrations
=> Get certificate Thumbprint


Code: 
string clientId = "bf4b99b3-8dbf-45da-8c05-03ef736da118"; //App Registration Id
string thumbprint = "F4FCC2AB6CE68968436CD3136B0F5BD7D639E011";  Certificate Thumbprint
X509Certificate2 cert = GetCertificate(thumbprint);
string resource = "api://bf4b99b3-8dbf-45da-8c05-03ef736da118"; //Got it from App Registration (Doesn't work with the /.default)

            string authority = "https://login.microsoftonline.com/{TenantId}";
            AuthenticationContext authContext = new AuthenticationContext(authority);
            var result = authContext.AcquireTokenAsync(resource, new ClientAssertionCertificate(clientId, cert)).Result;
            Console.WriteLine(result.AccessToken);

            var _client = new HttpClient();
            _client.DefaultRequestHeaders.Add("Authorization", "Bearer " + result.AccessToken);
            var content = new StringContent("", Encoding.UTF8, "application/json");
            HttpResponseMessage httpCallResult = await _client.PostAsync("https://xxx.azurewebsites.net/api/Function1", content);



private static  X509Certificate2 GetCertificate(string certThumbPrint)
        {
            X509Store certStore = new X509Store(StoreName.My, StoreLocation.CurrentUser);
            // Try to open the store.

            certStore.Open(OpenFlags.ReadOnly);
            // Find the certificate that matches the thumbprint.
            X509Certificate2Collection certCollection = certStore.Certificates.Find(
                X509FindType.FindByThumbprint, certThumbPrint, false);
            certStore.Close();

            // Check to see if our certificate was added to the collection. If no, 
            // throw an error, if yes, create a certificate using it.
            if (0 == certCollection.Count)
            {
                Console.WriteLine("Error: No certificate found containing thumbprint ");
            }

            return certCollection[0];
        }
------------------------

APP REGISTRATION

Followed this steps: https://www.eliostruyf.com/securing-azure-functions-existing-azure-ad-app/

I just went with the default settings creating a new Identity Provider
The only customization was for Advanced Rest Client y added .default to the scope api => the api://bf4b99b3-8dbf-45da-8c05-03ef736da118/.default

A) Select the Access Token CheckBox

B) Added the Desktop Platform, Selected the 3 checkboxes after created => Added http://localhost as URL

---------------------------------------------
CLIENT AND SECRET AUTHENTICATION  MSAL.NET 


using Microsoft.Identity.Client;

IConfidentialClientApplication app;
            app = ConfidentialClientApplicationBuilder.Create("a1a4a935-804f-419a-82dc-xxxxxxxxx") //App Registration ClientId
                                                      .WithClientSecret("xxxxxx")  //Secret
                                                      .WithAuthority(new Uri("https://login.microsoftonline.com/1e96b7bb-fe74-4183-aff2-xxxx"))  //TenantId
                                                      .Build();

            List<string> scopes = new List<string>() { "api://a1a4a935-804f-419a-82dc-xxxx/.default" }; //{Application ID URI}/.default
            var result = await app.AcquireTokenForClient(scopes).ExecuteAsync();


---------------------------------------------------------

USER CREDENTIALS WITH MSAL.NET

ON THE APP Registration
 => APIS
 	=> Add Permission
		=> My APIS Tab
			=> Select the same App of the App Registration
				=> Check User Impersonation.
 
         


  var _clientApp = PublicClientApplicationBuilder.Create("9bfa828e-XXXXXX") //App Registration ClientID
           .WithAuthority(AzureCloudInstance.AzurePublic, "1e96b7bb-XXXXXX") //Tenant ID
           .WithRedirectUri("http://localhost") //FF: Had to add LocalHost as RedirectURI in Azure App Registration
           //.WithDefaultRedirectUri()
           .Build();

            //string[] scopes = new string[] { "user.read" };
            string[] scopes = new string[] { "9bfa828e-XXXXXXX/user_impersonation" };  //{App Registration ID}/user_impersonation



            AuthenticationResult authResult = null;
            var app = _clientApp;
            //ResultText.Text = string.Empty;
            //TokenInfoText.Text = string.Empty;

            var accounts = await app.GetAccountsAsync();
            var firstAccount = accounts.FirstOrDefault();

            try
            {
                //authResult = await app.AcquireTokenSilent(scopes, firstAccount).ExecuteAsync();
                authResult = await app.AcquireTokenInteractive(scopes)
                       .WithAccount(accounts.FirstOrDefault())
                       .WithPrompt(Prompt.SelectAccount)
                       .ExecuteAsync();
            }
            catch (MsalUiRequiredException ex)
            {
                // A MsalUiRequiredException happened on AcquireTokenSilent.
                // This indicates you need to call AcquireTokenInteractive to acquire a token
                System.Diagnostics.Debug.WriteLine($"MsalUiRequiredException: {ex.Message}");

                try
                {
                    authResult = await app.AcquireTokenInteractive(scopes)
                        .WithAccount(accounts.FirstOrDefault())
                        .WithPrompt(Prompt.SelectAccount)
                        .ExecuteAsync();
                }
                catch (MsalException msalex)
                {
                    //ResultText.Text = $"Error Acquiring Token:{System.Environment.NewLine}{msalex}";
                }
            }
            catch (Exception ex)
            {
                //ResultText.Text = $"Error Acquiring Token Silently:{System.Environment.NewLine}{ex}";
                return;
            }

            if (authResult != null)
            {
                //ResultText.Text = await GetHttpContentWithToken(graphAPIEndpoint, authResult.AccessToken);
                //DisplayBasicTokenInfo(authResult);
                //this.SignOutButton.Visibility = Visibility.Visible;

                Console.WriteLine(authResult.AccessToken);

                var _client = new HttpClient();
                _client.DefaultRequestHeaders.Add("Authorization", "Bearer " + authResult.AccessToken);
                HttpResponseMessage httpCallResult = await _client.GetAsync("https://XXXXXXX.azurewebsites.net/api/Function1");

                Console.ReadLine();
            }

-------------------------------------------------------------------------------------

ASP.NET CORE WEB API JWT

Startup.cs

ConfigureServices

	services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            options.Audience = Configuration["AzureAd:ClientId"];
            options.Authority =
                $"{Configuration["AzureAd:Instance"]}{Configuration["AzureAd:TenantId"]}";
        });


Configure

    app.UseAuthentication();
    app.UseMvc();


appsettings.json
  "AzureAd": {
         "ClientId": "",
         "Instance": "https//login.microsoftonline.com/",
         "TenantId": ""
	}


-----------------------------------

CALLING FROM AN AZURE SERVICE (AzureServiceTokenProvider)

** This needs the Caller to have the Managed Identity turned On

var ClientId = "<AD App Id of Web API>";
var azureServiceTokenProvider = new AzureServiceTokenProvider();
string accessToken = await azureServiceTokenProvider.GetAccessTokenAsync(ClientId );

var wc = new System.Net.Http.HttpClient();
wc.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
var result = await wc.GetAsync("<Secured API URL>");


https://www.youtube.com/watch?v=r4QFBsT2YE8&t=51s
