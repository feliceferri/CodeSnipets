Azure Cosmos DB

https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-get-started

Nuget => Microsoft.Azure.Cosmos

//Cosmos DB => Portal => Keys 
const string EndpointUri = "https://xxxxx.documents.azure.com:443/";
const string PrimaryKey = "xxxx";

private static CosmosClient _cosmosClient;
private static Database _database;
private static Container _container;

 try
                {
                    if (_cosmosClient == null)
                        _cosmosClient = new CosmosClient(EndpointUri, PrimaryKey);

                    if (_database == null)
                        _database = await _cosmosClient.CreateDatabaseIfNotExistsAsync("CosmosDB");

                    if (_container == null)
                        _container = await _database.CreateContainerIfNotExistsAsync("RawPayloads", "/CorrelationId");

                    ItemResponse<Models.EnvelopeV1> andersenFamilyResponse = await _container.CreateItemAsync<Models.EnvelopeV1>(env, new PartitionKey(env.CorrelationId.ToString()));

                }
                catch (CosmosException de)
                {
                    Exception baseException = de.GetBaseException();
                    log.LogError(de, "");
                    log.LogError(baseException, "");
                }
                catch (Exception e)
                {
                    log.LogError(e, "");
                }


//REPLACE
ItemResponse<ResolutionForms.Models.Resolution> response2 = await container.ReplaceItemAsync<ResolutionForms.Models.Resolution>(storedData, storedData.correlationId);

// DELETE AND RECREATE 
//ItemResponse<ResolutionForms.Models.Resolution> response2 = await container.DeleteItemAsync<ResolutionForms.Models.Resolution>(storedData.correlationId, new PartitionKey(storedData.correlationId));
//response2 = await container.CreateItemAsync<ResolutionForms.Models.Resolution>(storedData, new PartitionKey(storedData.correlationId));


-------------------------------------------------------

QUERIES

https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-getting-started

------------------------

CUSTOM INDEX POLICY

https://cosmosdb.github.io/labs/dotnet/labs/04-indexing_in_cosmosdb.html

{
        "indexingMode": "consistent",
        "includedPaths": [
            {
                "path": "/manufacturerName/*"
            },
            {
                "path": "/foodGroup/*"
            },
            {
                "path": "/nutrients/[]/*"
            }
        ],
        "excludedPaths": [
            {
                "path": "/*"
            }
        ]
    }

--------------------------

CUSTOM INDEXING

ContainerProperties containerProp = new ContainerProperties("ContainerName", "/PartitionKey")
            {
                IndexingPolicy = new IndexingPolicy()
                {
                    IncludedPaths = { new IncludedPath { Path = "/PropA/*" },
                                      new IncludedPath { Path = "/PropB/*" },
                                      new IncludedPath { Path = "/Propc/*"}
                                    },
                    ExcludedPaths = { new ExcludedPath { Path = "/*" } 
                                    }
                }
            };
            //MaxRequestsPerTcpConnection default is 30, do not set over 50-100
            Database database = await cosmosClient.CreateDatabaseIfNotExistsAsync("CosmosDB");
            return await database.CreateContainerIfNotExistsAsync(containerProp);

------------------------------

QUERY Parent Property searching by child array inner property

SELECT c.name FROM c IN t.subsystems WHERE c.subContractorId = 'xxx'

--------------------------------------

QUERIES EXAMPLES

SELECT VALUE(c) FROM c JOIN t IN c.subsystems WHERE t.name = "xxx"

SELECT VALUE(c) FROM c JOIN t IN c.subsystems JOIN k IN t.isoParts WHERE k.name = "xxxx"

SELECT VALUE(c) FROM c JOIN t IN c.subsystems JOIN k IN t.isoParts JOIN l IN k.workItems WHERE l.name = "xxxx"

SELECT ContainerName, ARRAY(SELECT p.name FROM p in ContainerName.subsystems WHERE p.name ='xxx')
FROM ContainerName

SELECT * From c  WHERE ARRAY_CONTAINS(c.subsystems, {name: "xx"},true)

SELECT c.id as projectId, t.id as subSystem, k.id as isoPart, l as workItem  
FROM c JOIN t IN c.subsystems JOIN k IN t.isoParts JOIN l IN k.workItems 
WHERE l.statusCode = "xxx" and ARRAY_CONTAINS(l.approversEmails,"xxxx")

SELECT c.id, c.name, ARRAY(SELECT DISTINCT t.name, t.email FROM t IN c.users) as users FROM c

SELECT * FROM c WHERE c.xx IN ('{string.Join("','", yyy)}')"

-------------------------------------

FIELD EXISTS

IS_DEFINED(c.payload.field)

----------------------

COUNT ALL GRAND CHILDREN

SELECT COUNT(1) FROM c JOIN subsystem in c.subsystems JOIN isoPart in subsystem.isoParts JOIN workItem in isoPart.workItems JOIN link in workItem.links

----------------------

DATE FUNCTIONS

https://h-savran.blogspot.com/2020/10/new-datetime-funcs.html

--------------------

// SAMPLE STORED PROCEDURE

function simpler(datasetId) {
    var collection = getContext().getCollection();

    log = '';
    
    // Query documents and take 1st item.
    var isAccepted = collection.queryDocuments(
        collection.getSelfLink(),
        'SELECT VALUE COUNT(1) FROM root r WHERE r.datasetId ="' + datasetId + '"',{pageSize:-1 },
    function (err, feed_record_count, options) {
        if (err) throw err;

        // Check the feed and if empty, set the body to 'no docs found', 
        // else take 1st element from feed
        if (!feed_record_count || !feed_record_count.length) {
            var response = getContext().getResponse();
            response.setBody('no docs found');
        }
        else {
            var response = getContext().getResponse();
            //response.setBody("count: " + feed.length);
            record_count = parseInt(feed_record_count);
            for(var i = 0; i < 5000; i= i + 1000)
            {
                    isAccepted = collection.queryDocuments(
                            collection.getSelfLink(),
                            'SELECT * FROM root r WHERE r.datasetId ="' + datasetId + '" OFFSET ' + i + ' LIMIT 1000',{pageSize:-1 },
                            function (err, feed, options) {
                                if (err) throw err;
                                log = log + "|" + feed;
                                //response.setBody("log: " + log);  
                                
                                //////////////
                                feed.forEach(element => {
                                    element.bool3 = true;
                                    collection.replaceDocument(element._self, element,function (err){
                                        if (err) {
                                            throw err;
                                        }
                                    })
                                    //counter++;
                                });
                                /////////
                            });
            }  
            
            response.setBody("log: " + log);  
        }
    });

    if (!isAccepted) throw new Error('The query was not accepted by the server.');
}
---------------------------------------------------------------------

CREATE STORE PROCEDURE FROM CODE (WEB API)

private async Task CreateStoreProcedures(Container container)
        {
            string storedProcedureId = "spSoftDeleteDocuments";
            var sp = container.Scripts.ReadStoredProcedureAsync("storedProcedureId");
            StoredProcedureResponse storedProcedureResponse = await container.Scripts.CreateStoredProcedureAsync(new StoredProcedureProperties
            {
                Id = storedProcedureId,
                Body = @"function spSoftDeleteDocuments(datasetId) {
                   ...
		    }"
            }); 
        }
--------------------------------------------------------

EXECUTE STORE PROCEDURE FROM CODE (WEB API)

var resp = await _container.Scripts.ExecuteStoredProcedureAsync<string>("spSoftDeleteDocuments", new PartitionKey("87cc4242-f1d8-4d6a-beb4-cfbea4759e33"), new dynamic[] { "278a4d75-f7ae-468e-97c8-cf2d59db31af" });

-------------------------------------------------------

COMPOSITE INDEX

"compositeIndexes": [
    [
      {
        "path": "/__assetId",
        "order": "descending"
      },
      {
        "path": "/__timestamp",
        "order": "descending"
      },
      {
        "path": "/Battery",
        "order": "ascending"
      },
      {
        "path": "/AirtracStatus",
        "order": "ascending"
      }
    ]
    ],
-------------------------------------------------