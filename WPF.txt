WPF 

-----------------------------------------------------

WPF SYSTEM CONSTANTS 

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\SystemThemes\Wpf

-------------------------------------------------

XAML BINDINGS


Bind to another property on the object:

{Binding Path=PathToProperty, RelativeSource={RelativeSource Self}}

Property on an ancestor:

{Binding Path=PathToProperty, RelativeSource={RelativeSource AncestorType={x:Type typeOfAncestor}}}

Property on the templated parent (so you can do 2 way bindings in a ControlTemplate)

{Binding Path=PathToProperty, RelativeSource={RelativeSource TemplatedParent}}

--------------------------

DATAGRID FONT SIZE

<Page.Resources>
	<DiscreteObjectKeyFrame x:Key="DataGrindFontSize" Value="{Binding Path=OnePercentHeightInPixels, Converter={StaticResource FontSizeConverter}, ConverterParameter=2.5}"/>
</Page.Resources>

<DataGridTextColumn Header="Angle" Binding="{Binding Path = Angle}" Width="*"   FontSize="{Binding Value, Source={StaticResource DataGrindFontSize}}"/>


<DataGridTemplateColumn Header="Angle" Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock FontSize="{Binding Value, Source={StaticResource DataGrindFontSize}}" Foreground="{DynamicResource SelectedText}"  FontWeight="Bold"
                                               Margin="0,5,0,5">
                                         <Run Text="{Binding Angle}"></Run>
                                        <Run Text="&#186;"></Run>
                                    </TextBlock>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
-----------------------------------------------------------

WIDTH == HEIGHT

Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"

-------------------------------------------

BUTTON INSIDE DATAGRIDVIEW

<Button Command="{Binding Path=DataContext.EditGridRowCommand, RelativeSource= {RelativeSource FindAncestor,AncestorType={x:Type DataGrid}}}" CommandParameter="{Binding Id}" 
                                             HorizontalContentAlignment="Right" HorizontalAlignment="Right" />

------------------------------------------

COMMAND EN EL DATACONTEXT

<local:myUserControl Command="{Binding ElementName=someName, Path=DataContext.someCommand}"/>

----------------------------------------

ACCESS APP RESOURCES IN CODEBEHIND

return (SolidColorBrush) System.Windows.Application.Current.FindResource("RegularText"); 

------------------------------------
TRIGGER INSIDE A BUTTON EVENT

EventTrigger RoutedEvent="Button.Click" SourceName="BeginButton">
          <BeginStoryboard Name="MyBeginStoryboard">
            <Storyboard >
              <DoubleAnimation 
                Storyboard.TargetName="myRectangle" 
                Storyboard.TargetProperty="Width" 
                Duration="0:0:5" From="100" To="500" />
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger>
-----------------------------------------

BINDGING TO PAGE CONTEXT FROM DATAGRID OR OTHER SUB CONTROLS

 <Page.DataContext>
        <ViewModels:ShaftSensitivities_ViewModel x:Name="VM"/>
    </Page.DataContext>


"{Binding ElementName=VM, Path=OnePercentHeightInPixels, Converter={StaticResource FontSizeConverter}, ConverterParameter=3}"

-----------------------------------------------



LIST VIEW
a) Se le escondio los column headers
b) Tiene DOUBLE CLICK
c) Se le quito el hover
d) Se le quito la opcion de seleccionar dependiedo, "tiene un condicional"

<ListView x:Name="ListView1" Grid.Row="2" Grid.Column="1"  Background="{DynamicResource PanelBackgroundColor}" 
                  Foreground="{DynamicResource TextColor}" BorderThickness="0" > 
           <ListView.Resources>
                <Style TargetType="GridViewColumnHeader">
                    <Setter Property="Visibility" Value="Collapsed" />
                </Style>
             </ListView.Resources>

            <ListView.ItemContainerStyle>
                <Style TargetType="{x:Type ListViewItem}">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Black" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DarkSolidColor}"></Setter>
                            <Setter Property="BorderThickness" Value="1"></Setter>
                        </Trigger>

                    </Style.Triggers>

                    <Setter Property="Focusable" Value="{Binding ElementName=GridLoadFile, Path=IsVisible}"/> <!--NO SELECTION-->

                    <EventSetter Event="MouseDoubleClick" Handler="HandleDoubleClick" />
                </Style>
            </ListView.ItemContainerStyle>
            
            <ListView.View>
                <GridView>
                    <GridViewColumn DisplayMemberBinding="{Binding Name}" Header="File Name"></GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>

private void HandleDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var file = ((ListViewItem)sender).Content as Persistance.File;
            _VM.LoadFileCommand.Execute(file);
        }


--------------------------------------------

DEPENDENCY PROPERTY WITH NOTIFICATIONS FOR VALUE CHANGES (CALLBACK)

  public double OnePercentHeightInPixels
        {
            get { return (double)GetValue(OnePercentHeightInPixelsProperty); }
            set
            {
                SetValue(OnePercentHeightInPixelsProperty, value);
            }
        }

        // Using a DependencyProperty as the backing store for OnePercentHeightInPixels.  This enables animation, styling, binding, etc...
//The name of the Property To Register, has to be the name of the Property in the ViewModel
        public static readonly DependencyProperty OnePercentHeightInPixelsProperty =
            DependencyProperty.Register("OnePercentHeightInPixels", typeof(double), typeof(CustomButton), new PropertyMetadata(1.0, new PropertyChangedCallback(OnercentHeightInPixelsChanged)));


        private static void OnercentHeightInPixelsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            CustomButton Instance = sender as CustomButton;
            Instance._VM.OnePercentHeightInPixels = Convert.ToDouble(e.NewValue);
        }

------------------------------------

COMMAND IN USER CONTROL

 
 public partial class CustomButton : UserControl
    {

	CustomButton_ViewModel _VM;
        public CustomButton()
        {
            InitializeComponent();

            if (_VM == null)
            {
                //_VM = (CustomButton_ViewModel)this.DataContext;
                _VM = new CustomButton_ViewModel();
             }

            _VM.OnePercentHeightInPixels = 5;

            this.Loaded += CustomButton_Loaded;

         }

        private void CustomButton_Loaded(object sender, RoutedEventArgs e)
        {
	    //This code have to be done in _Loaded, if done in the constructor it wont work
            ICommand originalCommand = this.Command;
            this.DataContext = _VM;
            this.Command = originalCommand;
        }


	 //////// COMMAND IMPLEMENTATION //////////////////////////////////////////
        public ICommand Command
        {
            get { return (ICommand)GetValue(CommandProperty); }
            set { SetValue(CommandProperty, value); }
        }

        public static readonly DependencyProperty CommandProperty =
            DependencyProperty.Register("Command", typeof(ICommand), typeof(CustomButton), new UIPropertyMetadata(null));


        public object CommandParameter
        {
            get { return (object)GetValue(CommandParameterProperty); }
            set { SetValue(CommandParameterProperty, value); }
        }

        // Using a DependencyProperty as the backing store for CommandParameter.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty CommandParameterProperty =
            DependencyProperty.Register("CommandParameter", typeof(object), typeof(CustomButton), new UIPropertyMetadata(null));


        //////// ~COMMAND IMPLEMENTATION //////////////////////////////////////////

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if (Command != null && Command.CanExecute(this.CommandParameter))
            {
                Command.Execute(this.CommandParameter);
            }

        }


-------------------------------------

GET PARENT WINDOW FROM FRAME/CONTENT/PAGE CHILD

namespace WPF.Utilities
{
    class VisualTreeExplorer
    {
        //GetParent<Window>(this); this will get the parent window from any place in your application.

        public static T GetParent<T>(DependencyObject child) where T : DependencyObject
        {
            DependencyObject dependencyObject = VisualTreeHelper.GetParent(child);

            if (dependencyObject != null)
            {
                T parent = dependencyObject as T;
                if (parent != null)
                    return parent;
                else
                    return GetParent<T>(dependencyObject);
            }
            else
            {
                return null;
            }
        }
    }
}

---------------------------------------

CLOSE VIEW FROM VIEW MODEL

<Button Command="{Binding CloseCommand}" CommandParameter="{Binding ElementName=ProfileView}"/>

CloseCommand = new CommandHandler(async (parameter) => await CloseCommandAction((Window)parameter), () => true);

 public async Task CloseCommandAction(Window window)
        {
            if (window != null)
            {
                window.Close();
            }
        }

--------------------------

LOAD IMAGESOURCE IN CODE BEHIND 

 public ImageSource AvatarImageSource()
 {
	return new BitmapImage(new Uri(@"/Images/No_Photo.png", UriKind.Relative));
 }

------------------------------

ACCESS A PROJECT RESOURCE

{DefaultNamespace}.Properties.Resources.{ResourceName}
WPF.Properties.Resources.AvatarMale75x75

-------------------------------

WPF DEPENDENCY INJECTION

public partial class App : Application
    {

        private ServiceProvider serviceProvider;

        public App()
        {
            ServiceCollection services = new ServiceCollection();
            ConfigureServices(services);
            serviceProvider = services.BuildServiceProvider();
        }
        private void ConfigureServices(ServiceCollection services)
        {
            //NOTE!! Go to App.xml and in the header change StatupUri to => Startup="OnStartup"

            //services.AddDbContext<Data.ApplicationDbContext>(options =>
            //{
            //    options.UseSqlite("Data Source = Employee.db");
            //});
            services.AddDbContext<Data.ApplicationDbContext>();

            services.AddSingleton<Helpers.Loggin>();

            services.AddSingleton<MainWindow>();
            
        }
        private void OnStartup(object sender, StartupEventArgs e)
        {
            var mainWindow = serviceProvider.GetService<MainWindow>();
            mainWindow.Show();
        }
    }

--------------------------------

Application.Current == null when opening WPF from WinForms

FIX =>
//This is for when the WPF is launched from a windows form = https://stackoverflow.com/questions/35902815/why-does-application-current-null-in-a-winforms-application
            if (System.Windows.Application.Current == null) 
            {
                new System.Windows.Application();
            }
---------------------------------------------

FONTAWESOME

Download FontAwesome for Desktop
Add files to internal folder, Build Action: Resource, Copy if newer
In App.xaml <Application.Resources> or other <ResourceDictionary>:
<FontFamily x:Key="FontAwesome">/PROJECT_NAME;component/Fonts/FontAwesome.otf#Font Awesome 5 Free Solid</FontFamily>
<XML>
<Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/WPF;component/ResourceDictionary.xaml">
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
</Window.Resources>

<TextBlock x:Name="tbFontAwesome" Text="&#xf234;" FontFamily="{StaticResource FontAwesome}" Foreground="Red" FontSize="32" Margin="10" VerticalAlignment="Center"></TextBlock>
------------------------------------------------

MOVE FOCUS ON TAB AND ENTER

(This is for when using modified TextBoxes with syles for placeholders etc)

** Set the TabIndex for all the texboxes

private void Window_KeyUp(object sender, KeyEventArgs e)
        {
            try
            {
                TextBox focusToControl = null;

                if (e.Key == Key.Tab) //KeyTab when it comes its already in the next control.
                {
                    if (e.Source is TextBox textbox)
                        focusToControl = textbox;
                }
                else if (e.Key == Key.Enter)
                {
                    TraversalRequest tRequest = new TraversalRequest(FocusNavigationDirection.Next);
                    UIElement currentControlWithFocus = Keyboard.FocusedElement as UIElement;

                    if (currentControlWithFocus != null)
                        currentControlWithFocus.MoveFocus(tRequest);
                    
                    currentControlWithFocus = Keyboard.FocusedElement as UIElement;  
                    if (currentControlWithFocus is TextBox textbox)
                        focusToControl = textbox;
                }

                if (focusToControl != null)
                {
                    TextBox textSource = WPF.Utilities.VisualTreeExplorer.FindVisualChildByName<TextBox>(focusToControl, "textSource");
                    Keyboard.Focus(textSource);
                }
            }
            catch(Exception ex)
            {
#if DEBUG
                throw ex;
#endif
            }

        }
--------------------------------------------------

ARRAY OF CONTROLS FROM BINDING

<ItemsControl Grid.Row="1" ItemsSource="{Binding carouselData}" HorizontalAlignment="Center">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button DataContext="{Binding}" BorderThickness="0" Background="Transparent" HorizontalAlignment="Center" Cursor="Hand"
                                    Style="{StaticResource OpaqueHoverEffect}"
                                    Height="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}},  Path=DataContext.OnePercentHeightInPixels, Converter={converters2:NumberAdjustedToScreenSizeConverter}, ConverterParameter=5}"
                                    Margin="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.OnePercentHeightInPixels, Converter={converters2:MarginConverter}, ConverterParameter= 1 0 1 0 }"
                                    FontFamily="{StaticResource FontAwesome}" Foreground="DeepSkyBlue"
                                    Content="&#xf111;" 
                                    Command="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.CarouselCircleClick}" CommandParameter="{Binding index}"/>
                        <!--<Button Content="{Binding Content}" Command="{Binding Command}"/>-->
                    </DataTemplate>
                </ItemsControl.ItemTemplate>

            </ItemsControl>

------------------------------------------------------------------