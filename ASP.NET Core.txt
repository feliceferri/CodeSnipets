ERRORS HANDLING

ModelState.AddModelError(string.Empty, "There is not User assigned");


@if (!ViewContext.ViewData.ModelState.IsValid)
{
        var sb = new System.Text.StringBuilder();
        foreach (var modelState in ViewContext.ViewData.ModelState.Values)
        {
            foreach (var error in modelState.Errors)
            {
                sb.Append(error.ErrorMessage);
            }
        }
    <div class="alert alert-danger alert-dismissible fade show" role="alert" style="width:100%">
    @sb.ToString()
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    </div>
}


Close Alert by code

var topAlert = document.getElementById('topAlert');
if (topAlert != null) {
	//topAlert.alert("close") //Vanilla JS doesnt work for this
	$("#topAlert").alert("close");
}


------------------------------------------------------------------------

PARTIAL VIEW 

  <div class="form-group">
                                <span asp-validation-for="DeviceIdToAnalize" class="text-danger"></span>
                                <label>Device Id:</label>
                                <input class="form-control" asp-for="DeviceIdToAnalize" />
                            </div>
 <input type="submit" value="Run Device Analysis" class="btn btn-primary" id="centered-submit"
 onclick="DeviceAnalysis(document.getElementById('@nameof(Model.DeviceIdToAnalize)').value)"/>

<tbody id="MainTable">
	 <partial name="_ListDailyFeeds" model="Model" />
</tbody>

<script>
    function DeviceAnalysis(value) {

        $("body").css("cursor", "progress");

        try {
            $.ajax({
                type: "POST",
                url: "/Troubleshooting/DeviceAnalysis?DeviceIdToAnalize=" + value,
                //data: SchValues,
                //contentType: "application/json; charset=utf-8",
		beforeSend: function (request) {
                    request.setRequestHeader("RequestVerificationToken", $("[name='__RequestVerificationToken']").val());
                },
                success: function (response) {


                    $('#DeviceAnalysis').empty();
                    $('#DeviceAnalysis').append(response);

                },
                failure: function (response) {
                    alert('Error: ' + response);
                }
            });
        }
        catch (err) {
		alert('Error: ' + err);
        }
        finally {
            $("body").css("cursor", "default");
        }
    }
</script>

 [HttpPost]
 [ValidateAntiForgeryToken]
  public async Task<ActionResult> RefreshGrid(bool Filter)
        {
            try
            {

                List<DailyDataFeed> res = null;
                if (Filter == true)
                {
                    res = await _context.DailyDataFeeds.Where(x => Codes.Contains(x.PointCode)).OrderByDescending(x => x.IssueDate).Take(100).ToListAsync();
                }
                else
                {
                    res= await _context.DailyDataFeeds.OrderByDescending(x => x.IssueDate).Take(500).ToListAsync();
                }
                
                return PartialView("~/Views/DailyDataFeeds/_ListDailyFeeds.cshtml", res);
                
            }
            catch (Exception ex)
            {
                return null;
            }
        }


----------------------------------------------------------------------------------------

HIDRATE MODEL FROM FORM CONTENT IN JAVASCRIPT & CHANGE A VALUE IN THE ARRAY

 var data = $("#formCreateZone").serializeArray();
 
//Fill a value inside the array
for (index = 0; index < data.length; ++index) {
            if (data[index].name == "LocationId") {
                data[index].value = _SelectedLocationId;
                break;
            }
        }


-----------------------------

CONVERT PARTIAL VIEW TO STRING

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lhpcw.Controllers
{
    public static class ViewResultExtensions
    {
        /// <summary>
        /// Render a partial view to string.
        /// </summary>
        /// <typeparam name="TModel"></typeparam>
        /// <param name="controller"></param>
        /// <param name="viewNamePath"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        public static async Task<string> RenderViewToStringAsync<TModel>(this Controller controller, string viewNamePath, TModel model)
        {
            if (string.IsNullOrEmpty(viewNamePath))
                viewNamePath = controller.ControllerContext.ActionDescriptor.ActionName;

            controller.ViewData.Model = model;

            using (StringWriter writer = new StringWriter())
            {
                try
                {
                    IViewEngine viewEngine = controller.HttpContext.RequestServices.GetService(typeof(ICompositeViewEngine)) as ICompositeViewEngine;

                    ViewEngineResult viewResult = null;

                    if (viewNamePath.EndsWith(".cshtml"))
                        viewResult = viewEngine.GetView(viewNamePath, viewNamePath, false);
                    else
                        viewResult = viewEngine.FindView(controller.ControllerContext, viewNamePath, false);

                    if (!viewResult.Success)
                        return $"A view with the name '{viewNamePath}' could not be found";

                    ViewContext viewContext = new ViewContext(
                        controller.ControllerContext,
                        viewResult.View,
                        controller.ViewData,
                        controller.TempData,
                        writer,
                        new HtmlHelperOptions()
                    );

                    await viewResult.View.RenderAsync(viewContext);

                    return writer.GetStringBuilder().ToString();
                }
                catch (Exception exc)
                {
                    return $"Failed - {exc.Message}";
                }
            }
        }

        /// <summary>
        /// Render a partial view to string, without a model present.
        /// </summary>
        /// <typeparam name="TModel"></typeparam>
        /// <param name="controller"></param>
        /// <param name="viewNamePath"></param>
        /// <returns></returns>
        public static async Task<string> RenderViewToStringAsync(this Controller controller, string viewNamePath)
        {
            if (string.IsNullOrEmpty(viewNamePath))
                viewNamePath = controller.ControllerContext.ActionDescriptor.ActionName;

            using (StringWriter writer = new StringWriter())
            {
                try
                {
                    IViewEngine viewEngine = controller.HttpContext.RequestServices.GetService(typeof(ICompositeViewEngine)) as ICompositeViewEngine;

                    ViewEngineResult viewResult = null;

                    if (viewNamePath.EndsWith(".cshtml"))
                        viewResult = viewEngine.GetView(viewNamePath, viewNamePath, false);
                    else
                        viewResult = viewEngine.FindView(controller.ControllerContext, viewNamePath, false);

                    if (!viewResult.Success)
                        return $"A view with the name '{viewNamePath}' could not be found";

                    ViewContext viewContext = new ViewContext(
                        controller.ControllerContext,
                        viewResult.View,
                        controller.ViewData,
                        controller.TempData,
                        writer,
                        new HtmlHelperOptions()
                    );

                    await viewResult.View.RenderAsync(viewContext);

                    return writer.GetStringBuilder().ToString();
                }
                catch (Exception exc)
                {
                    return $"Failed - {exc.Message}";
                }
            }
        }

        
    }
}
----------------------------------------------------------------------------------------------------


INJECT HttpContext in AplicationDbContext

En Startup.cs => en ConfigureServices agregar: 

            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

En ApplicationDbContext =>

 private IHttpContextAccessor _contextAccessor = null;

public ApplicationDbContext():base()
        {
            //FF: Couldn't make this work. Missing a piece, althugh is not really needed as I'm injecting ApplicationDbContext on the Controller and thats it
            IServiceCollection services = new ServiceCollection();
            var serviceProvider = services.BuildServiceProvider();
            _contextAccessor = (IHttpContextAccessor)serviceProvider.GetService(typeof(IHttpContextAccessor));
        }

        public ApplicationDbContext(IHttpContextAccessor contextAccessor)
        {
            _contextAccessor = contextAccessor;
        }
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, IHttpContextAccessor contextAccessor)
            : base(options)
        {
            _contextAccessor = contextAccessor;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(_contextAccessor.HttpContext.Session.GetString("databaseconnection"));
            base.OnConfiguring(optionsBuilder);
        }

--------------------------------

UI Local Time <time> (JS)

En Shared\_Layout.cshtml

<script>
        //FF: Way to use it in razor => <time>Model.CreatedDateUtc.ToString("yyyy-MM-ddTHH:mm:ssZ")</time> InvarianCulture may be needed to add, in case having trouble with :
        var elements = document.getElementsByTagName('time');
        Array.prototype.forEach.call(elements, function (element) {
            utctimeval = element.innerText;
            if (utctimeval) {
                var date = new Date(utctimeval);
                element.innerText = date.toLocaleString();
            }
        });
    </script>

---------------------------------

FULL WIDTH PAGES (Not Container)

En Shared\_Layout.cshtml

    <div class="container">
        <main role="main" class="pb-3">
            <h1 style="margin-top:15px">@ViewData["Title"]</h1>
            @RenderBody()
        </main>
    </div>

    <div class="container-fluid">
        @RenderSection("FullWidth", required: false)
    </div>


En los pages

@section FullWidth
{
  HTML goes here
}

********************

ANOTHER WAY IS JUST TO WRITE THIS IN THE PAGE WE WANT FULL SCREEN

 .container {
        margin-left: 0px;
        margin-right: 0px;
        width: 100% !important;
        max-width: 100%;
    }

---------------------------------


UPLOAD A FILE

In the Model:

[NotMapped]
public IFormFile imagefile { get; set; }

In the View:

<form enctype="multipart/form-data" asp-action="Create">

 <div class="form-group">
            <label asp-for="imagefile">Select Image:</label>

            <div style="margin-top:5px">
                <i class="fa fa-camera" style="cursor: pointer;font-size: 30px;opacity: 0.6;" onclick="document.getElementById('imagefile').click();"></i>
                <span id="SelectedFileLabel" class="name" onclick="document.getElementById('imagefile').click();" style="cursor:pointer;margin-left:10px;">No file selected</span>
                <input asp-for="imagefile" type="file" id="imagefile" onchange="document.getElementById('SelectedFileLabel').innerText = this.value;" style=" display: none;">
            </div>
        </div>

On the Controller:

 [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create( Location model)
        {
            if (ModelState.IsValid)
            {
                model.Id = Guid.NewGuid();

                try
                {
                    await SaveImageAndFillModelWithSizes(model);
                }
                catch(Exception ex)
                {
                    ModelState.AddModelError(string.Empty,ex.Message);
                    return View(model);
                }

****

  private async Task SaveImageAndFillModelWithSizes(Location model)
        {
            if (model.imagefile.Length > 0)
            {

                model.extension = Path.GetExtension(model.imagefile.FileName);
                model.imageFileName = model.imagefile.FileName;

                try
                {
                    using (var image = Image.FromStream(model.imagefile.OpenReadStream()))
                    {
                        model.pixels_width = image.Width;
                        model.pixels_height = image.Height;
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("The Image is not in a valid format.");
                }


                string filePath = _env.WebRootPath + @"\images\FloorPlans\" + model.Id.ToString() + model.extension;
                using (Stream fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await model.imagefile.CopyToAsync(fileStream);
                }

            }
        }
*************

ON THE EDIT PAGE/MODEL

	Add the code to display errors at the top

        <div class="form-group">
            <input type="hidden" asp-for="imageFileName" />
            <label asp-for="imageFileName" class="control-label"></label>
            : &nbsp;
            <label id="existingFileLabel">@Model.imageFileName</label>
        </div>

            <div class="form-group">
                <label asp-for="imagefile">Change Image:</label>

                <div style="margin-top:5px">
                    <i class="fa fa-camera" style="cursor: pointer;font-size: 30px;opacity: 0.6;" onclick="document.getElementById('imagefile').click();"></i>
                    <span id="SelectedFileLabel" class="name" onclick="document.getElementById('imagefile').click();" style="cursor:pointer;margin-left:10px;">No file selected</span>
                    <input asp-for="imagefile" type="file" id="imagefile" onchange="document.getElementById('SelectedFileLabel').innerText = this.value;
                                                                                            document.getElementById('existingFileLabel').innerText = this.value;" style=" display: none;">
                </div>
            </div>



 [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(Guid id, Location model)
        {
            
            if (id != model.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {

                    try
                    {
                        await SaveImageAndFillModelWithSizes(model);
                    }
                    catch (Exception ex)
                    {
                        ModelState.AddModelError(string.Empty, ex.Message);
                        return View(model);
                    }

----------------------------

MODAL  (With Back Button, Form and PartialView)

<a class="btn btn-success" asp-action="Create" data-toggle="modal" data-target="#exampleModal"><i class="fas fa-plus-circle fa-lg"></i>&nbsp; Add New Employee</a>

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <form enctype="multipart/form-data" asp-action="Create" class="text-center">
            <div class="modal-content">
                <div class="modal-header"  style="padding:0px">
                    
                    <table width="100%" style="margin:0% 2% 0% 2%">
                        <tr>
                            <td width="20%">
                                <a asp-action="Index" class="fa-pull-left"><i class="fas fa-arrow-circle-left fa-2x"></i></a>
                            </td>
                            <td width="60%">
                                <p style="text-align:center"><h4>New Map/Location</h4></p>
                            </td>
                            <td width="20%" style="vertical-align:top;padding-top:5px">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" >
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </td>
                        </tr>
                    </table>
                        
                    
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="offset-1 col-10">
                            <br />
                            <partial name="_Create" model="Model.newLocation" />
                            <br />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="submit" value="Create" class="btn btn-success fa-pull-right" />
                </div>
            </div>
        </form>
    </div>
</div>

-----------------------------------------------------------------------------

FORM SUBMIT ON SELECT/COMBOBOX SELECTION (Without a submit button)

<form  asp-action="LocationMap" asp-controller="Management" method="post">
	 <select asp-for="locationId" asp-items="Model.locations_select" onchange="this.form.submit();">
        	<option disabled selected style="text-align: center ">Select Location</option>
         </select>
</<form 

-----------------------------------------------------------------------

TABLE WITH VERTICAL SCROLLBAR (without afecting parent row height)

<style>
    .bodycontainer {
        max-height: 40vh;
        margin: 0;
        overflow-y: auto;
    }

    .table-scrollable {
        margin: 0;
        padding: 0;
    }
</style>

<div class="row">
    <div class="col-4">
        <div class="table-responsive"  >
            <div class="bodycontainer scrollable">
                <table class="table table-sm table-hover">
                    <thead>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

** this article how to do a scrollable body, with a fixed Header and Footer => https://stackoverflow.com/questions/10420168/twitter-bootstrap-scrollable-table/47859095
---------------------------------------------------------

FILL SELECT (COMBOBOX) FROM AJAX RESPONSE

Model=> public List<SelectListItem> zonesForDemoing { get; set; }

Controller=> _dbContext.zones.Take(50).Select(x => new SelectListItem() { Text = x.zone, Value = x.Id.ToString() }).ToList();

View =>  if (response.zonesForDemoing)
                            {
                          
                                var s = '<option disabled style="text-align: center">Select Zone</option>';
                                for (var i = 0; i < response.zonesForDemoing.length; i++) {
                                    s += '<option value="' + response.zonesForDemoing[i].value + '">' + response.zonesForDemoing[i].text + '</option>';
                                }
                                $("#Demoing_ZoneId").html(s);
                            }

----------------------

BOOTRAP 4 TOGGLE SWITCH THAT RETURNS TRUE INTEAD OF ON/OFF

** SET value="true", this not mean checked, this means return true/false instead of on/off

<div class="custom-control custom-switch" style="float:right">
                    @{string checkbox_facemask = Model?.facemask == true ? "checked" : "";}
                    <input type="checkbox" class="custom-control-input" id="facemask_switch" name="facemask" value="true">
                    <label class="custom-control-label" for="facemask_switch">Wearing a Face Mask</label>
                </div>

------------------------------------------

REMOTE DATAANNOTATION

Model =>
[Remote(action: "Func", controller: "controllerName")]
public string ModelProperty { get; set; }

[AcceptVerbs("GET", "POST")]
public IActionResult Func(string ModelProperty)
      
	return Json(true);
	
	return Json(false);
	return Json($"System Error Occurred.");
      
-------------------------------------------

